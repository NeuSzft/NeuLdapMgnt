@inherits LayoutComponentBase

<EditForm Model="@studentUpdated" OnValidSubmit="HandleValidSubmit" class="d-flex flex-column gap-2 my-3">
	<DataAnnotationsValidator />

	<div class="text-end">
		@if (IsReadonly)
		{
			<button type="button" class="btn btn-warning" @onclick="ToggleReadonly">
				<i class="bi bi-pencil-square"></i> Edit
			</button>
		}
	</div>

	<div class="form-floating">
		<InputNumber class="form-control"
					 readonly="@IsReadonly"
					 id="student-id"
					 min="@Student.AllowedIdRange.Min"
					 max="@Student.AllowedIdRange.Max"
					 @bind-Value="studentUpdated!.Id" />
		<label for="student-id">OM</label>
		<ValidationMessage For="() => studentUpdated.Id" />
	</div>

	<div class="input-group gap-2">
		<label class="input-group-text user-select-none col-12 rounded" for="givenName">Name</label>

		<div class="form-floating col-12 col-md">
			<InputText class="form-control" readonly="@IsReadonly" placeholder="First name" id="givenName" @bind-Value="studentUpdated.FirstName" />
			<label for="given-name">First</label>
			<ValidationMessage For="() => studentUpdated.FirstName" />
		</div>

		<div class="form-floating col-12 col-md">
			<InputText class="form-control" readonly="@IsReadonly" placeholder="Middle name" id="middleName" @bind-Value="studentUpdated.MiddleName" />
			<label for="middle-name">Middle</label>
			<ValidationMessage For="() => studentUpdated.MiddleName" />
		</div>

		<div class="form-floating col-12 col-md">
			<InputText class="form-control" readonly="@IsReadonly" placeholder="Last name" id="lastName" @bind-Value="studentUpdated.LastName" />
			<label for="last-name">Last</label>
			<ValidationMessage For="() => studentUpdated.LastName" />
		</div>
	</div>

	<div class="input-group gap-2 align-items-center">
		<label class="input-group-text user-select-none col-12 rounded" for="classYearSelect">Class @studentUpdated.Class</label>

		<div class="form-floating col">
			<InputSelect class="form-select" id="class-year-select" disabled="@IsReadonly" @bind-Value="studentUpdated.ClassYear">
				@for (int year = Student.AllowedYearsRange.Min; year <= Student.AllowedYearsRange.Max; year++)
				{
					<option value="@year" selected="@year.Equals(studentUpdated.ClassYear)">@year</option>
				}
			</InputSelect>
			<label for="class-year-select">Year</label>
		</div>

		<div class="form-floating col">
			<InputSelect class="form-select" id="class-group-select" disabled="@IsReadonly" @bind-Value="studentUpdated.ClassGroup">
				@foreach (var group in Student.AllowedGroups)
				{
					<option value="@group" selected="@group.Equals(studentUpdated.ClassGroup)">@group</option>
				}
			</InputSelect>
			<label for="class-group-select">Group</label>
		</div>

		<div class="form-floating col">
			<InputSelect class="form-select" id="class-sub-group-select" disabled="@IsReadonly" @bind-Value="studentUpdated.ClassSubGroup">
				<option value=""></option>
				@for (int subGroup = Student.AllowedSubGroupsRange.Min; subGroup <= Student.AllowedSubGroupsRange.Max; subGroup++)
				{
					<option value="@subGroup" selected="@subGroup.Equals(studentUpdated.ClassSubGroup)">@subGroup</option>
				}
			</InputSelect>
			<label for="class-sub-group-select">Sub Group</label>
		</div>
	</div>
	<ValidationMessage For="() => studentUpdated.Class" />

	<div class="form-floating">
		<InputText class="form-control" readonly="@IsReadonly" id="username" @bind-Value="studentUpdated.Username" />
		<label for="username">Username</label>
		<ValidationMessage For="() => studentUpdated.Username" />
	</div>

	<div class="form-floating">
		<InputNumber class="form-control"
					 readonly="@IsReadonly"
					 id="user-id"
					 min="@Student.AllowedUidRange.Min"
					 max="@Student.AllowedUidRange.Max"
					 @bind-Value="studentUpdated.Uid" />
		<label for="user-id">User Id</label>
		<ValidationMessage For="() => studentUpdated.Uid" />
	</div>

	<div class="form-floating">
		<InputNumber class="form-control"
					 readonly="@IsReadonly"
					 id="group-id"
					 min="@Student.AllowedGidRange.Min"
					 max="@Student.AllowedGidRange.Max"
					 @bind-Value="studentUpdated.Gid" />
		<label for="group-id">Group Id</label>
		<ValidationMessage For="() => studentUpdated.Gid" />
	</div>

	<div class="form-floating">
		<InputText class="form-control" readonly="@IsReadonly" id="email" placeholder="Student@example.com" @bind-Value="studentUpdated.Email" />
		<label for="email">Email</label>
		<ValidationMessage For="() => studentUpdated.Email" />
	</div>

	<div class="form-floating">
		<InputText class="form-control" readonly="@IsReadonly" id="home-directory" placeholder="/home/Student" @bind-Value="studentUpdated.HomeDirectory" />
		<label for="home-directory">Directory</label>
		<ValidationMessage For="() => studentUpdated.HomeDirectory" />
	</div>

	<div class="form-floating">
		<InputText type="password" class="form-control" readonly="@IsReadonly" id="password" @bind-Value="studentUpdated.Password" />
		<label for="password">Password</label>
		<ValidationMessage For="() => studentUpdated.Password" />
	</div>

	@if (!IsReadonly)
	{
		<div class="d-flex justify-content-end gap-2">
			@if (CanDelete)
			{
				<button type="button" class="btn btn-danger" @onclick="ToggleReadonly">
					<i class="bi bi-trash-fill"></i> Delete
				</button>
			}
			<button type="button" class="btn btn-secondary" @onclick="ToggleReadonly">
				<i class="bi bi-x-lg"></i> Cancel
			</button>
			<button type="submit" class="btn btn-success">
				<i class="bi bi-check-lg fs-5"></i> Save
			</button>
		</div>
	}
</EditForm>

@code {
	[Parameter]
	public Student TheStudent { get; set; } = StudentFactory.CreateEmptyStudent().Build();

	[Parameter]
	public EventCallback<Student> OnStudentUpdated { get; set; }

	[Parameter]
	public bool IsReadonly { get; set; }

	[Parameter]
	public bool CanDelete { get; set; } = true;

	private Student studentOriginal = StudentFactory.CreateEmptyStudent().Build();
	private Student studentUpdated = StudentFactory.CreateEmptyStudent().Build();

	protected override void OnInitialized()
	{
		studentOriginal = Utils.GetClone<Student>(TheStudent)!;
		studentUpdated = Utils.GetClone<Student>(studentOriginal)!;
	}

	private async Task HandleValidSubmit()
	{
		Console.WriteLine("AWAITING UPDATE");
		await OnStudentUpdated.InvokeAsync(studentUpdated);
	}

	private void ToggleReadonly()
	{
		studentUpdated = Utils.GetClone<Student>(studentOriginal)!;
		IsReadonly = !IsReadonly;
	}
}
