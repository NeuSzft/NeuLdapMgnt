@inherits LayoutComponentBase

<table class="table table-striped">
	<thead>
		<tr>
			<th class="user-select-none" role="button" @onclick="@(() => SortTable("Id"))">
				Id
				@if (sortBy == "Id")
				{
					<i class="bi @GetSortIcon(isAscending)"></i>
				}
				else
				{
					<i class="bi bi-chevron-expand"></i>
				}
			</th>
			<th class="user-select-none" role="button" @onclick="@(() => SortTable("Name"))">
				Name
				@if (sortBy == "Name")
				{
					<i class="bi @GetSortIcon(isAscending)"></i>
				}
				else
				{
					<i class="bi bi-chevron-expand"></i>
				}
			</th>
			<th class="user-select-none" role="button" @onclick="@(() => SortTable("Class"))">
				Class
				@if (sortBy == "Class")
				{
					<i class="bi @GetSortIcon(isAscending)"></i>
				}
				else
				{
					<i class="bi bi-chevron-expand"></i>
				}
			</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var student in Students)
		{
			<tr>
				<td>@student.Id</td>
				<td>@student.FirstName @student.LastName</td>
				<td>@(student.ClassNumber).@(student.ClassSymbol)</td>
			</tr>
		}
	</tbody>
</table>

@code {
	[Parameter]
	public List<StudentModel> Students { get; set; } = new();

	private string sortBy = "";
	private bool isAscending = true;

	private void SortTable(string propertyName)
	{
		if (sortBy == propertyName)
		{
			isAscending = !isAscending;
		}
		else
		{
			sortBy = propertyName;
			isAscending = true;
		}

		switch (propertyName)
		{
			case "Id":
				Students = isAscending 
				? Students
					.OrderBy(x => x.Id)
					.ToList() 
				: Students
					.OrderByDescending(x => x.Id)
					.ToList();
				break;

			case "Name":
				Students = isAscending 
				? Students
					.OrderBy(x => x.FirstName)
					.ThenBy(x => x.LastName)
					.ToList() 
				: Students
					.OrderByDescending(x => x.FirstName)
					.ThenByDescending(x => x.LastName)
					.ToList();
				break;

			case "Class":
				Students = isAscending
				? Students
					.OrderBy(x => x.ClassNumber)
					.ThenBy(x => x.ClassSymbol)
					.ToList()
				: Students
					.OrderByDescending(x => x.ClassNumber)
					.ThenByDescending(x => x.ClassSymbol)
					.ToList();
				break;

			default:
				break;
		}
	}

	private string GetSortIcon(bool asc) => asc ? "bi-chevron-up" : "bi-chevron-down";
}

