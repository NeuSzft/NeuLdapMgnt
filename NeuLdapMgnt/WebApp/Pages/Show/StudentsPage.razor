@page "/students"

<PageTitle>Students</PageTitle>

<div class="row justify-content-between g-2">
	<div class="col">
		<h1>Students <span class="badge bg-primary p-1">@StudentService.Students.Count</span></h1>
	</div>
	<div class="col text-end">
		@if (_isLoading)
		{
			<ButtonLoading ButtonColor="ButtonColor.Secondary" SpinnerColor="SpinnerColor.Secondary"/>
		}
		else
		{
			<ButtonRefresh OnClick="OnRefresh" Text="Refresh"/>
		}
	</div>
</div>

@if (_isLoading)
{
	<Loading Text="Loading students"/>
}
else if (_isUpdating)
{
	<Loading Text="Updating students"/>
}
else if (!StudentService.Students.Any())
{
	<div class="d-flex justify-content-center text-center">
		<div>
			<h3 class="my-4">There are no <strong>[Active]</strong> students</h3>
			<ButtonAdd Text="Add Student" OnClick="ToAddPage"/>
			<Button Color="ButtonColor.Dark" Outline="true" Class="ms-3" @onclick="ToInactivesPage">
				<i class="bi bi-eye"></i>
				View
				<strong>[Inactives]</strong>
			</Button>
		</div>
	</div>
}
else
{
	<TableStudents Students="StudentService.Students"
	               OnStudentsUpdate="HandleUpdateStudents"/>
}

@code {
	private bool _isLoading  = true;
	private bool _isUpdating;

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);
		await LocalDbService.FetchClassesAsync();
		await StudentService.FetchStudentsAsync();
		_isLoading = false;
	}

	private async Task HandleUpdateStudents((List<Student>, string, bool) context)
	{
		var (students, cls, isInactive) = context;
		_isUpdating = true;
		await StudentService.UpdateStudentsAsync(students, cls, isInactive);
		await OnRefresh();
		_isUpdating = false;
	}

	private async Task OnRefresh()
	{
		_isLoading = true;
		await StudentService.FetchStudentsAsync();
		_isLoading = false;
	}

	private void ToAddPage()       => NavManager.NavigateTo("/students/add");
	private void ToInactivesPage() => NavManager.NavigateTo("/db/inactive-users");
}
