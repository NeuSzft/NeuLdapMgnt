@page "/students"

<PageTitle>Students</PageTitle>

<div class="row justify-content-between g-2">
	<div class="col">
		<h1>Students</h1>
	</div>
	<div class="col text-end">
		<ButtonRefresh OnClick="RefreshStudents" Text="Refresh"/>
	</div>
</div>

@if (isLoading)
{
	<Loading Text="Loading students" />
}
else if (!DatabaseLocal.Students.Any())
{
	<div class="d-flex justify-content-center text-center">
		<div>
			<h3 class="my-4">There are no students in the database</h3>
			<ButtonAdd Text="Add Students" OnClick="ToAddPage"/>
		</div>
	</div>
}
else
{
	<TableStudents Students="DatabaseLocal.Students" />
}

@code {
	private bool isLoading;

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);
		await RefreshStudents();
	}

	private async Task RefreshStudents()
	{
		try
		{
			isLoading = true;
			DatabaseLocal.Students.Clear();

			var response = await ApiRequests.GetStudentsAsync();
			if (response.IsSuccess())
			{
				DatabaseLocal.Students = new(response.Values);
			}

			if (response.Errors.Any())
			{
				ToastService.Notify(ToastMessages.Error(response.GetError()));
			}

			StateHasChanged();
		}
		catch (Exception e)
		{
			string message = e is HttpRequestException re ? re.GetErrorMessage() : e.Message;
			ToastService.Notify(ToastMessages.Error(message));
		}
		isLoading = false;
	}

	private void ToAddPage()
	{
		NavManager.NavigateTo("/students/add");
	}
}


