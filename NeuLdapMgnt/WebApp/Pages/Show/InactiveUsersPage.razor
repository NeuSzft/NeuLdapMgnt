@page "/db/inactive-users"

<PageTitle>Inactive Users</PageTitle>
<ConfirmDialog @ref="dialog" />

<h1>Inactive Users</h1>

@if (isLoading)
{
	<Loading Text="Fetching Inactive Users" />
}
else if (isActivating)
{
	<Loading Text="Activating Users" />
}
else
{
	@if (!usersList.Any())
	{
		<div class="d-flex justify-content-center text-center">
			<div>
				<h3 class="my-4">There are no inactive users</h3>
			</div>
		</div>
	}
	else
	{
		<div class="d-flex justify-content-end align-items-center g-2 mb-3">
			<div class="ms-2">
				<Button Color="ButtonColor.Success" Outline="true" Disabled="isUserSelected" @onclick="OnActivateSelectedUsers">
					Activate selected
				</Button>
			</div>
			<div class="ms-2">
				<Button Color="ButtonColor.Danger" Outline="true" Disabled="isUserSelected" @onclick="OnDeleteSelectedUsers">
					Delete permanently
				</Button>
			</div>
		</div>
		<div class="table-students table-responsive rounded px-1 border flex-fill">
			<table class="table table-striped table-borderless align-middle">
				<thead class="sticky-top">
					<tr class="rounded">
						<th class="user-select-none text-wrap col-1" role="button" @onclick="SelectAllUsers">
							@if (!AreUsersSelected())
							{
								<span>Select all</span>
							}
							else
							{
								<span>Deselect all</span>
							}
						</th>
						<th class="user-select-none">ID</th>
						<th class="user-select-none text-end">Inspect</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var user in LocalDbService.InactiveUsers)
					{
						<tr>
							<td class="rounded-start">
								<input class="form-check-input"
									   type="checkbox"
									   checked="@selectedUsers.Contains(user)"
									   @onchange="() => SelectUser(user)" />
							</td>
							<td>@user</td>
							<td class="text-end rounded-end">
								<Button Color="ButtonColor.Light" Class="border-secondary" Size="Size.Small" @onclick="() => InspectUser(user)">
									<i class="bi bi-eye"></i>
								</Button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
}

@code {
	private List<string> usersList = new();
	private List<string> selectedUsers = new();
	private ConfirmDialog dialog = default!;

	private bool isLoading;
	private bool isActivating;
	private bool isUserSelected => !selectedUsers.Any();

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);
		isLoading = true;
		await LocalDbService.FetchInactiveUsersAsync();
		usersList = LocalDbService.InactiveUsers.ToList();
		isLoading = false;
	}

	private async Task OnActivateSelectedUsers()
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("List", selectedUsers);

		var confirmation = await dialog.ShowAsync<CustomList>(
			title: $"Set status to [Active] to [{selectedUsers.Count}] user(s)?",
			parameters: parameters,
			confirmDialogOptions: DialogOptions.Confirm());

		if (!confirmation) return;

		isActivating = true;
		await LocalDbService.ActivateUsersAsync(selectedUsers);
		usersList = LocalDbService.InactiveUsers.ToList();
		isActivating = false;
		NotificationService.NotifySuccess("Selected users were activated.");
	}

	private async Task OnDeleteSelectedUsers()
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("List", selectedUsers);

		var confirmation = await dialog.ShowAsync<CustomList>(
			title: $"Delete permanently [{selectedUsers.Count}] user(s)?",
			parameters: parameters,
			confirmDialogOptions: DialogOptions.Confirm());

		if (!confirmation) return;

		isActivating = true;
		await LocalDbService.DeleteUsersAsync(selectedUsers);
		usersList = LocalDbService.InactiveUsers.ToList();
		isActivating = false;
		NotificationService.NotifySuccess("Selected users were permanently deleted!");
	}

	private async Task InspectUser(string userId)
	{
		if (long.TryParse(userId, out long studentId) && studentId != 0)
		{
			Student? student = await StudentService.FetchStudentAsync(studentId);
			if (student is null) return;
			NavManager.NavigateTo($"/students/{studentId}");
		}
		else
		{
			Teacher? teacher = await TeacherService.FetchTeacherAsync(userId);
			if (teacher is null) return;
			NavManager.NavigateTo($"/teachers/{userId}");
		}
	}

	private void SelectUser(string user)
	{
		if (selectedUsers.Contains(user))
		{
			selectedUsers.Remove(user);
		}
		else
		{
			selectedUsers.Add(user);
		}
	}

	private void SelectAllUsers()
	{
		if (AreUsersSelected())
		{
			selectedUsers.Clear();
		}
		else
		{
			selectedUsers = LocalDbService.InactiveUsers.ToList();
		}
	}

	private bool AreUsersSelected() => selectedUsers.Count > 0;
}
