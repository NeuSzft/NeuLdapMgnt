@page "/db/inactive-users"

<PageTitle>Inactive Users</PageTitle>
<ConfirmDialog @ref="_dialog"/>

<h1>Inactive Users <span class="badge bg-primary p-1 mb-1 align-middle">@_usersList.Count</span></h1>

@if (_isLoading)
{
	<Loading Text="Fetching Inactive Users"/>
}
else if (_isActivating)
{
	<Loading Text="Activating Users"/>
}
else if (_isDeleting)
{
	<Loading Text="Deleting Users"/>
}
else
{
	@if (!_usersList.Any())
	{
		<div class="d-flex justify-content-center text-center">
			<div>
				<h3 class="my-4">There are no <strong>[Inactive]</strong> users</h3>
			</div>
		</div>
	}
	else
	{
		<div class="d-flex justify-content-end align-items-center g-2 mb-3">
			<div class="ms-2">
				<Button id="activate-users" Color="ButtonColor.Success" Outline="true" Disabled="@IsUserSelected" @onclick="OnActivateSelectedUsers">
					Activate selected
				</Button>
			</div>
			<div class="ms-2">
				<Button id="delete-users" Color="ButtonColor.Danger" Outline="true" Disabled="@IsUserSelected" @onclick="OnDeleteSelectedUsers">
					Delete permanently
				</Button>
			</div>
		</div>
		<div class="table-students table-responsive rounded px-1 border flex-fill">
			<table class="table table-striped table-borderless align-middle">
				<thead class="sticky-top">
				<tr class="rounded">
					<th class="user-select-none text-wrap col-1" role="button" @onclick="SelectAllUsers">
						@if (!AreUsersSelected())
						{
							<span>Select all</span>
						}
						else
						{
							<span>Deselect all</span>
						}
					</th>
					<th class="user-select-none">ID</th>
					<th class="user-select-none text-end">Inspect</th>
				</tr>
				</thead>
				<tbody>
				@foreach (var user in LocalDbService.InactiveUsers)
				{
					<tr>
						<td class="rounded-start">
							<input class="form-check-input"
							       type="checkbox"
							       checked="@_selectedUsers.Contains(user)"
							       @onchange="() => SelectUser(user)"/>
						</td>
						<td>@user</td>
						<td class="text-end rounded-end">
							<Button Color="ButtonColor.Light" Class="border-secondary" Size="Size.Small" @onclick="() => InspectUser(user)">
								<i class="bi bi-eye"></i>
							</Button>
						</td>
					</tr>
				}
				</tbody>
			</table>
		</div>
	}
}

@code {
	private List<string>  _usersList     = new();
	private List<string>  _selectedUsers = new();
	private ConfirmDialog _dialog        = default!;

	private bool _isLoading;
	private bool _isActivating;
	private bool _isDeleting;
	private bool IsUserSelected => !_selectedUsers.Any();

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);
		_isLoading = true;
		await LocalDbService.FetchInactiveUsersAsync();
		_usersList = LocalDbService.InactiveUsers.ToList();
		_isLoading = false;
	}

	private async Task OnActivateSelectedUsers()
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("List", _selectedUsers);

		var confirmation = await _dialog.ShowAsync<CustomList>(
			title: $"Set status to [Active] to [{_selectedUsers.Count}] user(s)?",
			parameters: parameters,
			confirmDialogOptions: DialogOptions.Confirm());

		if (!confirmation) return;

		_isActivating = true;
		StateHasChanged();
		await LocalDbService.ActivateUsersAsync(_selectedUsers);
		_usersList = LocalDbService.InactiveUsers.ToList();
		_isActivating = false;
		NotificationService.NotifySuccess("Selected users were activated.");
	}

	private async Task OnDeleteSelectedUsers()
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("List", _selectedUsers);

		var confirmation = await _dialog.ShowAsync<CustomList>(
			title: $"Delete permanently [{_selectedUsers.Count}] user(s)?",
			parameters: parameters,
			confirmDialogOptions: DialogOptions.Confirm());

		if (!confirmation) return;

		_isDeleting = true;
		StateHasChanged();
		await LocalDbService.DeleteUsersAsync(_selectedUsers);
		_usersList = LocalDbService.InactiveUsers.ToList();
		_isDeleting = false;
		NotificationService.NotifySuccess("Selected users were permanently deleted!");
	}

	private async Task InspectUser(string userId)
	{
		if (long.TryParse(userId, out long studentId) && studentId != 0)
		{
			Student? student = await StudentService.FetchStudentAsync(studentId.ToString());
			if (student is null) return;
			NavManager.NavigateTo($"/students/{studentId}");
		}
		else
		{
			Teacher? teacher = await TeacherService.FetchTeacherAsync(userId);
			if (teacher is null) return;
			NavManager.NavigateTo($"/teachers/{userId}");
		}
	}

	private void SelectUser(string user)
	{
		if (_selectedUsers.Contains(user))
		{
			_selectedUsers.Remove(user);
		}
		else
		{
			_selectedUsers.Add(user);
		}
	}

	private void SelectAllUsers()
	{
		if (AreUsersSelected())
		{
			_selectedUsers.Clear();
		}
		else
		{
			_selectedUsers = LocalDbService.InactiveUsers.ToList();
		}
	}

	private bool AreUsersSelected() => _selectedUsers.Count > 0;
}
