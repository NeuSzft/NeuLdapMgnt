@page "/db/classes"

<PageTitle>Classes</PageTitle>

<ConfirmDialog @ref="dialog" />

<Modal @ref="modalAdd" Title="Add new class" ModalType="ModalType.Light" Size="ModalSize.Small" OnHidden="() => newClass = string.Empty">
	<BodyTemplate>
		<div class="form-floating">
			<InputText class="form-control rounded" id="class-input" @bind-Value="newClass" />
			<label for="class-input">Class</label>
		</div>
	</BodyTemplate>
	<FooterTemplate>
		<ButtonSave Text="Add" OnClick="SubmitClasses" />
	</FooterTemplate>
</Modal>

<Modal @ref="modalRemove" Title="Delete class" ModalType="ModalType.Danger" Size="ModalSize.Small">
	<BodyTemplate>
		<div class="form-floating">
			<InputSelect class="form-select rounded" id="class-year-select" @bind-Value="removeClass">
				<option value=""></option>
				@foreach (string cls in LocalDbService.Classes)
				{
					<option value="@cls">@cls</option>
				}
			</InputSelect>
			<label for="class-select">Class to delete</label>
		</div>
	</BodyTemplate>
	<FooterTemplate>
		<ButtonCancel Text="Cancel" OnClick="HideModalRemove" />
		<ButtonDelete Text="Delete" OnClick="RemoveClasses" />
	</FooterTemplate>
</Modal>


<div class="row d-flex align-items-center mb-2">
	<div class="col-1">
		<h1>Classes</h1>
	</div>
	<div class="col d-flex justify-content-end text-nowrap gap-2">
		<Button Color="ButtonColor.Primary" Outline="true" @onclick="ShowModalAdd">
			<i class="bi bi-plus-lg"></i> Add
		</Button>
		<Button Color="ButtonColor.Danger" Outline="true" @onclick="ShowModalRemove">
			<i class="bi bi-trash"></i> Delete
		</Button>
	</div>
</div>

@if (LocalDbService.Classes.Any())
{
	<div class="table-admins table-responsive rounded px-1 border flex-fill">
		<table class="table table-striped table-borderless align-middle">
			<thead class="sticky-top">
				<tr>
					<th class="user-select-none">Name</th>
					<th class="user-select-none text-end">Inspect</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var cls in LocalDbService.Classes)
				{
					<tr>
						<td class="rounded-start">@cls</td>
						<td class="rounded-end text-end">
							<Button Color="ButtonColor.Light" Class="border-secondary" @onclick="() => InspectClass(cls)" Size="Size.Small">
								<i class="bi bi-eye"></i>
							</Button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}
else
{
	<div class="d-flex justify-content-center text-center">
		<div>
			<h3 class="my-4">There are no classes in the database</h3>
		</div>
	</div>
}


@code {
	private List<string> newClasses = new();
	private Modal modalAdd = default!;
	private Modal modalRemove = default!;
	private ConfirmDialog dialog = default!;

	private string newClass = string.Empty;
	private string removeClass = string.Empty;
	private bool isLoading = false;

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);

		isLoading = true;
		await LocalDbService.FetchClassesAsync();
		isLoading = false;
	}

	private async Task SubmitClasses()
	{
		newClass = newClass.ToLower();
		if (string.IsNullOrEmpty(newClass))
		{
			ToastService.Notify(ToastMessages.Danger("Please fill in the class."));
			return;
		}

		if (LocalDbService.Classes.Any(x => x.Equals(newClass, StringComparison.OrdinalIgnoreCase)))
		{
			ToastService.Notify(ToastMessages.Danger("This class already exists."));
			return;
		}


		try
		{
			newClasses = LocalDbService.Classes.ToList();
			newClasses.Add(newClass);
			var response = await ApiRequests.AddClassesAsync(newClasses);

			if (response.IsSuccess())
				NotificationService.NotifySuccess($"{newClass} class was added!");
			else
				NotificationService.NotifyError(response.GetError());

			isLoading = true;
			await LocalDbService.FetchClassesAsync(); 
			isLoading = false;
		}
		catch (Exception e)
		{
			NotificationService.HandleError(e);
		}
		newClass = string.Empty;
	}

	private async Task RemoveClasses()
	{
		if (string.IsNullOrEmpty(removeClass))
		{
			ToastService.Notify(ToastMessages.Danger("Please select a class to remove."));
			return;
		}

		var confirmation = await dialog.ShowAsync(
			title: $"Are you sure you want to delete ({removeClass}) class?",
			message1: "This will delete permanently delete the class.",
			message2: "Do you want to proceed?",
			confirmDialogOptions: DialogOptions.Delete()
		);

		if (!confirmation) return;
		isLoading = true;

		try
		{
			LocalDbService.Classes.Remove(removeClass);
			var response = await ApiRequests.AddClassesAsync(LocalDbService.Classes);

			if (response.IsSuccess())
				NotificationService.NotifySuccess($"{removeClass} class was removed!");
			else
				NotificationService.NotifyError(response.GetError());

			await HideModalRemove();
			await LocalDbService.FetchClassesAsync();
		}
		catch (Exception e)
		{
			NotificationService.HandleError(e);
		}
		removeClass = string.Empty;
		isLoading = false;
	}

	private void InspectClass(string name) => NavManager.NavigateTo($"/classes/{name}");

	private async Task ShowModalAdd() => await modalAdd!.ShowAsync();
	private async Task HideModalAdd() => await modalAdd!.HideAsync();

	private async Task ShowModalRemove() => await modalRemove!.ShowAsync();
	private async Task HideModalRemove() => await modalRemove!.HideAsync();
}
