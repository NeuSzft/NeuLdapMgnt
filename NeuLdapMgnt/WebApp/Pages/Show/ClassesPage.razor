@page "/db/classes"

<PageTitle>Classes</PageTitle>

<ConfirmDialog @ref="_dialog"/>

<Modal @ref="_modalAdd"
       Title="Add new class"
       ModalType="ModalType.Light"
       Size="ModalSize.Small"
       OnHidden="() => _newClass = string.Empty">
	<BodyTemplate>
		<div class="form-floating">
			<InputText class="form-control rounded" id="class-input" @bind-Value="_newClass"/>
			<label for="class-input">Class</label>
		</div>
	</BodyTemplate>
	<FooterTemplate>
		@if (_isAdding)
		{
			<ButtonLoading ButtonColor="ButtonColor.Success" SpinnerColor="SpinnerColor.Success"/>
		}
		else
		{
			<ButtonSave Text="Add" OnClick="SubmitClasses"/>
		}
	</FooterTemplate>
</Modal>

<Modal @ref="_modalRemove" Title="Delete class" ModalType="ModalType.Danger" Size="ModalSize.Small" OnHidden="HideModalRemove">
	<BodyTemplate>
		<div class="form-floating">
			<InputSelect class="form-select rounded" id="class-select" @bind-Value="_removeClass">
				<option value=""></option>
				@foreach (string cls in LocalDbService.Classes)
				{
					<option value="@cls">@cls</option>
				}
			</InputSelect>
			<label for="class-select">Class to delete</label>
		</div>
	</BodyTemplate>
	<FooterTemplate>
		@if (_isRemoving)
		{
			<ButtonLoading ButtonColor="ButtonColor.Danger" SpinnerColor="SpinnerColor.Danger"/>
		}
		else
		{
			<ButtonDelete Text="Delete" OnClick="RemoveClasses"/>
		}
	</FooterTemplate>
</Modal>


<div class="row d-flex align-items-center mb-2">
	<div class="col">
		<h1>Classes <span class="badge bg-primary p-1 mb-1 align-middle">@LocalDbService.Classes.Count</span></h1>
	</div>
	@if (!_isLoading)
	{
		<div class="col d-flex justify-content-end text-nowrap gap-2">
			<Button id="add-class" Color="ButtonColor.Primary" Outline="true" @onclick="ShowModalAdd">
				<i class="bi bi-plus-lg"></i> Add
			</Button>
			<Button id="delete-class" Color="ButtonColor.Danger" Outline="true" @onclick="ShowModalRemove">
				<i class="bi bi-trash"></i> Delete
			</Button>
		</div>
	}
</div>


@if (_isLoading)
{
	<Loading Text="Fetching classes"/>
}
else if (_isAdding)
{
	<Loading Text="@($"Adding [{_newClass}]")"/>
}
else if (_isRemoving)
{
	<Loading Text="@($"Removing [{_newClass}]")"/>
}
else if (LocalDbService.Classes.Any())
{
	<div class="table-admins table-responsive rounded px-1 border flex-fill">
		<table class="table table-striped table-borderless align-middle">
			<thead class="sticky-top">
			<tr>
				<th class="user-select-none">Name</th>
				<th class="user-select-none text-end">Inspect</th>
			</tr>
			</thead>
			<tbody>
			@foreach (var cls in LocalDbService.Classes)
			{
				<tr>
					<td class="rounded-start fs-5">
						<BadgeClass Class="@cls"/>
					</td>
					<td class="rounded-end text-end">
						<Button id="@($"inspect-{cls}")" Color="ButtonColor.Light" Class="border-secondary" @onclick="() => InspectClass(cls)" Size="Size.Small">
							<i class="bi bi-eye"></i>
						</Button>
					</td>
				</tr>
			}
			</tbody>
		</table>
	</div>
}
else
{
	<div class="d-flex justify-content-center text-center">
		<div>
			<h3 class="my-4">There are no classes in the database</h3>
		</div>
	</div>
}


@code {
	private List<string>  _newClasses  = new();
	private Modal         _modalAdd    = default!;
	private Modal         _modalRemove = default!;
	private ConfirmDialog _dialog      = default!;

	private string _newClass    = string.Empty;
	private string _removeClass = string.Empty;
	private bool   _isLoading;
	private bool   _isAdding;
	private bool   _isRemoving;

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);

		_isLoading = true;
		await LocalDbService.FetchClassesAsync();
		_isLoading = false;
	}

	private async Task SubmitClasses()
	{
		_newClass = _newClass.ToLower();
		if (string.IsNullOrEmpty(_newClass))
		{
			ToastService.Notify(ToastMessages.Danger("Please fill in the class."));
			return;
		}

		if (LocalDbService.Classes.Any(x => x.Equals(_newClass, StringComparison.OrdinalIgnoreCase)))
		{
			ToastService.Notify(ToastMessages.Danger("This class already exists."));
			return;
		}

		try
		{
			_newClasses = LocalDbService.Classes.ToList();
			_newClasses.Add(_newClass);

			_isAdding = true;
			StateHasChanged();
			var response = await ApiRequests.AddClassesAsync(_newClasses);
			_isAdding = false;

			if (response.IsSuccess())
			{
				NotificationService.NotifySuccess($"{_newClass} class was added!");
			}
			else
			{
				NotificationService.NotifyError(response.GetError());
			}

			_isLoading = true;
			await LocalDbService.FetchClassesAsync();
			_isLoading = false;
		}
		catch (Exception e)
		{
			NotificationService.HandleError(e);
		}

		_newClass = string.Empty;
	}

	private async Task RemoveClasses()
	{
		if (string.IsNullOrEmpty(_removeClass))
		{
			ToastService.Notify(ToastMessages.Danger("Please select a class to remove."));
			return;
		}

		var confirmation = await _dialog.ShowAsync(
			title: $"Are you sure you want to delete [{_removeClass}] class?",
			message1: $"This action will permanently delete [{_removeClass}] class.",
			confirmDialogOptions: DialogOptions.Delete()
		);

		if (!confirmation) return;

		try
		{
			LocalDbService.Classes.Remove(_removeClass);

			_isRemoving = true;
			StateHasChanged();
			var response = await ApiRequests.AddClassesAsync(LocalDbService.Classes);
			_isRemoving = false;

			if (response.IsSuccess())
			{
				NotificationService.NotifySuccess($"{_removeClass} class was removed!");
			}
			else
			{
				NotificationService.NotifyError(response.GetError());
			}

			await LocalDbService.FetchClassesAsync();
		}
		catch (Exception e)
		{
			NotificationService.HandleError(e);
		}

		_removeClass = string.Empty;
		_isLoading = false;
	}

	private void InspectClass(string cls) => NavManager.NavigateTo($"/db/classes/{cls.Replace('/', '-')}");
	private async Task ShowModalAdd() => await _modalAdd.ShowAsync();
	private async Task ShowModalRemove() => await _modalRemove.ShowAsync();
	private async Task HideModalRemove() => await _modalRemove.HideAsync();
}
