@page "/teachers"

<PageTitle>Teachers</PageTitle>

<div class="row justify-content-between g-2">
	<div class="col">
		<h1>Teachers <span class="badge bg-primary p-1 mb-1 align-middle">@TeacherService.Teachers.Count(x => !x.IsInactive)</span></h1>
	</div>
	<div class="col text-end">
		@if (_isLoading)
		{
			<ButtonLoading ButtonColor="ButtonColor.Secondary" SpinnerColor="SpinnerColor.Secondary"/>
		}
		else
		{
			<ButtonRefresh OnClick="FetchData" Text="Refresh"/>
		}
	</div>
</div>

@if (_isLoading)
{
	<Loading Text="Loading teachers"/>
}
else if (TeacherService.Teachers.All(x => x.IsInactive) || !TeacherService.Teachers.Any())
{
	<div class="d-flex justify-content-center text-center">
		<div>
			<h3 class="my-4">There are no <BadgeActive/> teachers</h3>
			<ButtonAdd Text="Add Teacher" OnClick="ToAddPage"/>
			<Button Color="ButtonColor.Dark" Outline="true" Class="ms-3" @onclick="ToInactivesPage">
				<i class="bi bi-eye"></i>
				View
				<strong>Inactives</strong>
			</Button>
		</div>
	</div>
}
else
{
	<TableTeachers Teachers="TeacherService.Teachers.Where(x => !x.IsInactive).ToList()"
	               OnTeachersUpdate="HandleUpdateTeachers"/>
}

@code {
	private bool _isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);
		_isLoading = true;
		await FetchData();
		_isLoading = false;
	}

	private async Task HandleUpdateTeachers((List<Teacher>, bool, bool) context)
	{
		var (teachers, isAdmin, isInactive) = context;
		_isLoading = true;
		await TeacherService.UpdateTeachersAsync(teachers, isAdmin, isInactive);
		await FetchData();
		_isLoading = false;
	}

	private async Task FetchData()
	{
		await LocalDbService.FetchInactiveUsersAsync();
		await LocalDbService.FetchClassesAsync();
		await TeacherService.FetchTeachersAsync();
	}

	private void ToAddPage()       => NavManager.NavigateTo("/teachers/add");
	private void ToInactivesPage() => NavManager.NavigateTo("/db/inactive-users");
}
