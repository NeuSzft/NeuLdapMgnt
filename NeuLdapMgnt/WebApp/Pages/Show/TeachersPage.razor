@page "/teachers"

<PageTitle>Teachers</PageTitle>

<div class="row justify-content-between g-2">
	<div class="col">
		<h1>Teachers</h1>
	</div>
	<div class="col text-end">
		<ButtonRefresh OnClick="RefreshTeachers" Text="Refresh" />
	</div>
</div>

@if (isLoading)
{
	<Loading Text="Loading teachers" />
}
else if (!DatabaseLocal.Teachers.Any())
{
	<div class="d-flex justify-content-center text-center">
		<div>
			<h3 class="my-4">There are no teachers in the database</h3>
			<ButtonAdd Text="Add Teachers" OnClick="ToAddPage" />
		</div>
	</div>
}
else
{
	<TableTeachers Teachers="DatabaseLocal.Teachers" />
}

@code {
	private bool isLoading { get; set; }

	protected override async Task OnInitializedAsync()
	{
		isLoading = true;
		ApiRequests.EnsureAuthentication(NavManager);
		await RefreshTeachers();
		await FetchClasses();
		isLoading = false;
	}

	private async Task RefreshTeachers()
	{
		try
		{
			isLoading = true;
			DatabaseLocal.Teachers.Clear();
			DatabaseLocal.Admins.Clear();

			var responseTeachers = await ApiRequests.GetTeachersAsync();
			if (responseTeachers.IsSuccess())
			{
				DatabaseLocal.Teachers = new(responseTeachers.Values);
			}

			if (responseTeachers.Errors.Any())
			{
				ToastService.Notify(ToastMessages.Error(responseTeachers.GetError()));
			}

			var responseAdmins = await ApiRequests.GetAdminsAsync();
			if (responseAdmins.IsSuccess())
			{
				DatabaseLocal.Admins = new(responseAdmins.Values[0]);
			}

			if (responseAdmins.Errors.Any())
			{
				ToastService.Notify(ToastMessages.Error(responseAdmins.GetError()));
			}


			StateHasChanged();
		}
		catch (HttpRequestException httpError)
		{
			if (httpError.StatusCode is HttpStatusCode.BadRequest)
			{
				ToastService.Notify(ToastMessages.NoConnection());
			}
			else
			{
				ToastService.Notify(ToastMessages.Error(httpError.Message));
			}
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}
		isLoading = false;
	}

	private async Task FetchClasses()
	{
		try
		{
			DatabaseLocal.Classes.Clear();

			var response = await ApiRequests.GetClassesAsync();
			if (response.IsSuccess())
			{
				DatabaseLocal.Classes = response.Values.SelectMany(x => x).OrderBy(x => x).ToList();
			}
			if (response.Errors.Any())
			{
				await ModalService.ShowAsync(ModalOptions.Error(response.GetError()));
			}
		}
		catch (Exception e)
		{
			string message = e is HttpRequestException re ? re.GetErrorMessage() : e.Message;
			ToastService.Notify(ToastMessages.Error(message));
		}
	}

	private void ToAddPage()
	{
		NavManager.NavigateTo("/teachers/add");
	}
}

