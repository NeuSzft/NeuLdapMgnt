@page "/db/default-admin"

<PageTitle>Default Admin Settings</PageTitle>

<div class="d-flex flex-column gap-2 my-2">
	<h3>Default Admin Settings</h3>

	<div class="d-flex align-items-center mb-3">
		<div class="form-check form-switch ">
			<InputCheckbox @bind-Value="_adminEnabled" id="default-admin-enabled-switch" @oninput="args => EnableAdmin((bool)args.Value!)" class="form-check-input" style="width: 3em; height: 1.5em; margin-right:0.5em; margin-bottom: 0.05em"/>
		</div>
		<label for="default-admin-enabled-switch" class="form-check-label align-middle">Enable default admin</label>
	</div>

	<div class="alert alert-warning mb-4" role="alert">
		The default admin is only meant to be used for creating some initial admin accounts and should be disabled later.
	</div>

	<FormDefaultAdmin/>
</div>

@code {

	private bool _adminEnabled;

	private async Task EnableAdmin(bool enable) {
		RequestResult result = await ApiRequests.SendStringAsync(HttpMethod.Put, "/api/default-admin/enabled", enable.ToString());
		ToastService.Notify(result.IsSuccess()
			? ToastMessages.Success($"Successfully {(enable ? "en" : "dis")}abled the Default Admin.")
			: ToastMessages.Error(result.GetError())
		);
	}

	protected override async Task OnInitializedAsync() {
		if (!ApiRequests.EnsureAuthentication(NavManager))
			return;

		RequestResult<bool> result = await ApiRequests.SendRequestAsync<bool>(HttpMethod.Get, "/api/default-admin/enabled");
		if (result.IsSuccess())
			_adminEnabled = result.GetValue();
		else
			NotificationService.NotifyError(result.GetError());
	}

}
