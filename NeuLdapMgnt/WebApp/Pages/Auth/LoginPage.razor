@page "/login"

<PageTitle>Log In</PageTitle>
<div class="d-flex justify-content-center align-items-center mb-5 h-100">
	<EditForm Model="@_credentials" OnValidSubmit="HandleLogin" class="d-flex flex-column gap-3" style="max-width: 350px;">
		<DataAnnotationsValidator/>

		<div class="h4 border border-dark-subtle rounded p-3 mb-0 fw-bold user-select-none">Neu LDAP Management</div>

		<div class="form-floating">
			<InstantInputText class="form-control" id="username" @bind-Value="_credentials.Username"/>
			<label for="username">Username</label>
			<ValidationMessage For="() => _credentials.Username"/>
		</div>

		<div class="form-floating">
			<InstantInputText class="form-control" id="password" @bind-Value="_credentials.Password" type="password"/>
			<label for="password">Password</label>
			<ValidationMessage For="() => _credentials.Password"/>
		</div>
		<Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Outline="true" Disabled="_isLoading">
			@if (_isLoading)
			{
				<Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary"/>
			}
			else
			{
				<span>Log In</span>
			}
		</Button>
	</EditForm>
</div>

@code {
	private LoginModel _credentials = new();
	private bool       _isLoading   = false;

	private async Task HandleLogin()
	{
		try
		{
			_isLoading = true;
			var response = await ApiRequests.LoginAsync(_credentials.Username, _credentials.Password);

			if (response)
			{
				ToastService.Notify(ToastMessages.WelcomeBack(_credentials.Username));
				NavManager.NavigateTo("/");
			}
			else
			{
				ToastService.Notify(ToastMessages.InvalidCredentials());
			}
		}
		catch (Exception e)
		{
			NotificationService.HandleError(e);
		}

		_isLoading = false;
	}

}
