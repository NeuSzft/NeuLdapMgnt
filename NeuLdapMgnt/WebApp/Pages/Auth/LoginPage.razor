@page "/login"

<PageTitle>Login</PageTitle>

<EditForm Model="@credentials" OnValidSubmit="HandleLogin" class="d-flex flex-column gap-3 mt-5 mx-auto" style="max-width: 350px;">
	<DataAnnotationsValidator />

	<Button Type="ButtonType.Link" Color="ButtonColor.Dark" Outline="true" Size="Size.ExtraLarge" Disabled="true"><strong>Neu LDAP Management</strong></Button>

	<div class="form-group">
		<label class="form-label" for="username">Username</label>
		<InputText class="form-control" id="username" @bind-Value="credentials.Username" />
		<ValidationMessage For="() => credentials.Username" />
	</div>

	<div class="form-group mb-2">
		<label class="form-label" for="password">Password</label>
		<InputText class="form-control" id="password" @bind-Value="credentials.Password" type="password" />
		<ValidationMessage For="() => credentials.Password" />
	</div>
	<Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Outline="true" Disabled="isLoading">
		@if (isLoading)
		{
			<Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary" />
		}
		else
		{
			<span>Login</span>
		}
	</Button>
</EditForm>

@code {
	private LoginModel credentials = new();
	private bool isLoading = false;

	private async Task HandleLogin()
	{
		try
		{
			isLoading = true;
			var response = await ApiRequests.LoginAsync(credentials.Username, credentials.Password);

			if (response)
			{
				ToastService.Notify(ToastMessages.WelcomeBack(credentials.Username));
				NavManager.NavigateTo("/");
			}
			else
			{
				ToastService.Notify(ToastMessages.InvalidCredentials());
			}
		}
		catch (HttpRequestException httpError)
		{
			string errorMessage = Utils.GetErrorMessage(httpError);
			ToastService.Notify(ToastMessages.Error(errorMessage));
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}

		isLoading = false;
	}
}

