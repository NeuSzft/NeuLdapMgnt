@page "/students/add"

<PageTitle>Add student</PageTitle>

<Modal @ref="modal" title="@modalTitle" IsScrollable="true" ModalType="ModalType.Danger">
	<BodyTemplate>
		<CustomList List="errorList" />
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Secondary" @onclick="HideModal">Ok</Button>
	</FooterTemplate>
</Modal>

<div class="row">
	<div class="col-12 col-md">
		<h1 class="d-inline-block">Add student</h1>
	</div>
	<div class="col-12 col-xl text-end">
		@if (!isUploading)
		{
			<FileUpload OnFileUploaded="OnFileUploaded" />
		}
	</div>
</div>

@if (isUploading)
{
	<Loading Text="Importing students" />
}
else
{
	<BaseEditFormStudent TheStudent="student" CanDelete="false" IsReadonly="false" OnSubmit="OnSubmit" />
	<ConfirmDialog @ref="dialog" />
}

@code {
	private Student student = StudentFactory.CreateEmptyStudent().Build();
	private List<string> errorList = new();
	private Modal modal = default!;
	private ConfirmDialog dialog = default!;

	private string modalTitle => $"{errorList.Count} Error(s) during import";
	private bool isUploading = false;

	protected override void OnInitialized()
	{
		ApiRequests.EnsureAuthentication(NavManager);
	}

	private async Task<bool> OnSubmit(Student studentUpdated)
	{
		try
		{
			var parameters = new Dictionary<string, object>();
			parameters.Add("Student", studentUpdated);

			var confirmation = await dialog.ShowAsync<StudentSummary>("Create this student?", parameters, DialogOptions.Confirm());
			if (!confirmation) return false;

			isUploading = true;
			var response = await ApiRequests.AddStudentAsync(studentUpdated);
			isUploading = false;

			if (response.IsSuccess())
			{
				ToastService.Notify(ToastMessages.Success($"{studentUpdated.FullName} ({studentUpdated.Id}) was added!"));
				student = StudentFactory.CreateEmptyStudent().Build();
				return true;
			}

			if (response.Errors.Any())
			{
				if (response.GetError().Equals("The object already exists."))
				{
					ToastService.Notify(ToastMessages.Danger($"OM: {studentUpdated.Id} already exists."));
				}
				else
				{
					ToastService.Notify(ToastMessages.Error(response.GetError()));
				}
				return false;
			}
		}
		catch (HttpRequestException httpError)
		{
			if (httpError.Message.Contains("Failed to fetch"))
			{
				ToastService.Notify(ToastMessages.NoConnection());
			}
			else
			{
				ToastService.Notify(ToastMessages.Error(httpError.Message));
			}
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}

		return false;
	}

	private async Task OnFileUploaded(IBrowserFile file)
	{
		try
		{
			isUploading = true;
			var response = await ApiRequests.UploadStudentFileAsync(file);
			isUploading = false;

			if (response.IsSuccess())
			{
				ToastService.Notify(ToastMessages.Success($"{file.Name} imported!"));
			}

			if (response.Errors.Any())
			{
				errorList = response.Errors.ToList();
				await ShowModal();
			}

		}
		catch (HttpRequestException httpError)
		{
			if (httpError.Message.Contains("Failed to fetch"))
			{
				ToastService.Notify(ToastMessages.NoConnection());
			}
			else
			{
				ToastService.Notify(ToastMessages.Error(httpError.Message));
			}
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}
	}

	private async Task ShowModal() => await modal!.ShowAsync();

	private async Task HideModal()
	{
		await modal!.HideAsync();
		NavManager.NavigateTo("/students");
	}
}

