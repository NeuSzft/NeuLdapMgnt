@page "/students/add"

<PageTitle>Add student</PageTitle>

<Modal @ref="modal" title="Modal title" IsScrollable="true" ModalType="ModalType.Danger">
	<BodyTemplate>
		<p>Error during import</p>
		<ul class="list-group">
			@foreach (var error in ErrorList)
			{
				<li class="list-group-item">@error</li>
			}
		</ul>
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Secondary" @onclick="HideModal">Ok</Button>
	</FooterTemplate>
</Modal>

<div class="row">
	<div class="col-12 col-md">
		<h1 class="d-inline-block">Add student</h1>
	</div>
	<div class="col-12 col-xl text-end">
		<FileUpload OnFileUploaded="OnFileUploaded" />
	</div>
</div>

<BaseEditFormStudent TheStudent="student" CanDelete="false" IsReadonly="false" OnSubmit="HandleStudentUpdated" />

@code {
	private Student? student = StudentFactory.CreateEmptyStudent().Build();
	private IEnumerable<string> ErrorList = null!;
	private Modal modal = default!;

	protected override void OnInitialized()
	{
		ApiRequests.EnsureAuthentication(NavManager);
	}

	private async Task HandleStudentUpdated(Student studentUpdated)
	{
		if (student!.Equals(studentUpdated)) return;

		try
		{
			var response = await ApiRequests.AddStudentAsync(studentUpdated);

			if (response is null)
			{
				ModalOption modalOption = new()
				{
					Title = "Error",
					Message = "No connection",
					Type = ModalType.Danger,
					ShowFooterButton = false
				};

				await ModalService.ShowAsync(modalOption);
				return;
			}

			if (response.IsSuccess())
			{
				ModalOption modalOption = new()
					{
						Title = "Success",
						Message = $"{studentUpdated.Id} ({studentUpdated.FullName}) was successfully added",
						Type = ModalType.Success,
						ShowFooterButton = false
					};

				await ModalService.ShowAsync(modalOption);
				NavManager.NavigateTo("/students");
			}

			if (response.Errors.Any())
			{
				ModalOption modalOption = new()
					{
						Title = "Error",
						Message = response.GetError(),
						Type = ModalType.Danger,
						ShowFooterButton = false
					};

				await ModalService.ShowAsync(modalOption);
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}

	private async Task OnFileUploaded(IBrowserFile file)
	{
		try
		{
			var response = await ApiRequests.UploadFileAsync(file);
			if (response is null)
			{
				// Add a modal to display no response error.
				Console.WriteLine("No response from the api.");
				return;
			}

			if (response.IsSuccess())
			{
				ModalOption modalOption = new()
					{
						Title = "Student import",
						Message = "Successfully imported",
						Type = ModalType.Success,
						ShowFooterButton = false
					};

				await ModalService.ShowAsync(modalOption);

				NavManager.NavigateTo("/students");
			}

			if (response.Errors.Any())
			{
				ErrorList = response.Errors;
				await ShowModal();
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}
	}

	private async Task ShowModal() => await modal!.ShowAsync();

	private void HideModal() => NavManager.NavigateTo("/students");
}

