@page "/students/add"

<PageTitle>Add student</PageTitle>

<Modal @ref="modal" title="Error during import" IsScrollable="true" ModalType="ModalType.Danger">
	<BodyTemplate>
		<CustomList List="ErrorList" />
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Secondary" @onclick="HideModalClick">Ok</Button>
	</FooterTemplate>
</Modal>

<div class="row">
	<div class="col-12 col-md">
		<h1 class="d-inline-block">Add student</h1>
	</div>
	<div class="col-12 col-xl text-end">
		<FileUpload OnFileUploaded="OnFileUploaded" />
	</div>
</div>

<BaseEditFormStudent TheStudent="student" CanDelete="false" IsReadonly="false" OnSubmit="OnSubmit" />
<ConfirmDialog @ref="dialog" />

@code {
	private Student? student = StudentFactory.CreateEmptyStudent().Build();
	private List<string> ErrorList = new();
	private Modal modal = default!;
	private ConfirmDialog dialog = default!;

	protected override void OnInitialized()
	{
		ApiRequests.EnsureAuthentication(NavManager);
	}

	private async Task OnSubmit(Student studentUpdated)
	{
		if (dialog == null)
		{
			ToastService.Notify(ToastMessages.Error("System not initialized properly."));
			return;
		}

		if (student!.Equals(studentUpdated)) return;

		try
		{
			var parameters = new Dictionary<string, object>();
			parameters.Add("Student", studentUpdated);

			var confirmation = await dialog.ShowAsync<StudentSummary>("Create this student?", parameters);
			if (!confirmation) return;

			var response = await ApiRequests.AddStudentAsync(studentUpdated);
			if (response.IsSuccess())
			{
				ToastService.Notify(ToastMessages.Success($"{studentUpdated.Id} ({studentUpdated.FullName}) was successfully added"));
				NavManager.NavigateTo("/students");
			}

			if (response.Errors.Any())
			{
				await ModalService.ShowAsync(ModalOptions.Error(response.GetError()));
			}
		}
		catch (HttpRequestException httpError)
		{
			if (httpError.Message.Contains("Failed to fetch"))
			{
				ToastService.Notify(ToastMessages.NoConnection());
			}
			else
			{
				ToastService.Notify(ToastMessages.Error(httpError.Message));
			}
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}
	}

	private async Task OnFileUploaded(IBrowserFile file)
	{
		try
		{
			var response = await ApiRequests.UploadStudentFileAsync(file);
			if (response.IsSuccess())
			{
				ToastService.Notify(ToastMessages.Success($"Imported successfully ({file.Name})!"));
			}

			if (response.Errors.Any())
			{
				ErrorList = response.Errors.ToList();
				await ShowModalClick();
			}
		}
		catch (HttpRequestException httpError)
		{
			if (httpError.Message.Contains("Failed to fetch"))
			{
				ToastService.Notify(ToastMessages.NoConnection());
			}
			else
			{
				ToastService.Notify(ToastMessages.Error(httpError.Message));
			}
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}
	}

	private async Task ShowModalClick() => await modal!.ShowAsync();

	private async Task HideModalClick()
	{
		await modal!.HideAsync();
		NavManager.NavigateTo("/students");
	}
}

