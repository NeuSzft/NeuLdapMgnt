@page "/students/add"

<PageTitle>Add Student</PageTitle>

<Modal @ref="modal" title="@modalTitle" IsScrollable="true" ModalType="ModalType.Danger">
	<BodyTemplate>
		<CustomList List="errorList" />
	</BodyTemplate>
	<FooterTemplate></FooterTemplate>
</Modal>

<div class="row">
	<div class="col-12 col-md">
		<h1 class="d-inline-block">Add student</h1>
	</div>
	<div class="col-12 col-xl text-end">
		@if (!isUploading)
		{
			<FileUpload OnFileUploaded="OnFileUploaded" />
		}
	</div>
</div>

@if (isSubmitting)
{
	<Loading Text="@submitString" />
}
else if (isUploading)
{
	<Loading Text="Importing students" />
}
else
{
	<FormStudent Student="student" CanDelete="false" IsReadonly="false" OnSubmit="OnSubmit" />
	<ConfirmDialog @ref="dialog" />
}

@code {
	private Student student = new();
	private List<string> errorList = new();
	private Modal modal = default!;
	private ConfirmDialog dialog = default!;

	private string modalTitle => $"Error";
	private string submitString => $"Creating {student.FullName}";
	private bool isSubmitting = false;
	private bool isUploading = false;

	protected override void OnInitialized()
	{
		ApiRequests.EnsureAuthentication(NavManager);
	}

	private async Task<bool> OnSubmit(Student studentUpdated)
	{
		try
		{
			var parameters = new Dictionary<string, object>();
			parameters.Add("Student", studentUpdated);

			var confirmation = await dialog.ShowAsync<SummaryStudent>($"Add {studentUpdated.FullName}?", parameters, DialogOptions.Confirm());
			if (!confirmation) return false;

			isSubmitting = true;
			var response = await ApiRequests.AddStudentAsync(studentUpdated);

			if (response.IsSuccess())
			{
				ToastService.Notify(ToastMessages.Success($"{studentUpdated.FullName} ({studentUpdated.Id}) was added!"));
				student = new();
				return true;
			}

			if (response.Errors.Any())
			{
				if (response.Errors.Length > 1)
				{
					errorList = response.Errors.ToList();
					await ShowModal();
				}
				else if (response.GetError().Equals("the object already exists.", StringComparison.OrdinalIgnoreCase))
				{
					ToastService.Notify(ToastMessages.Danger($"OM: {studentUpdated.Id} already exists."));
				}
				else
				{
					ToastService.Notify(ToastMessages.Error(response.GetError()));
				}
			}
		}
		catch (HttpRequestException httpError)
		{
			string errorMessage = Utils.GetErrorMessage(httpError);
			ToastService.Notify(ToastMessages.Error(errorMessage));
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}

		isSubmitting = false;
		return false;
	}

	private async Task OnFileUploaded(IBrowserFile file)
	{
		try
		{
			isUploading = true;
			var response = await ApiRequests.UploadStudentFileAsync(file);

			if (response.IsSuccess())
			{
				ToastService.Notify(ToastMessages.Success($"{file.Name} imported!"));
				NavManager.NavigateTo("/students");
			}

			if (response.Errors.Any())
			{
				errorList = response.Errors.ToList();
				ToastService.Notify(ToastMessages.Info($"{file.Name} import was finished!"));
				await ShowModal();
			}
		}
		catch (HttpRequestException httpError)
		{
			string errorMessage = Utils.GetErrorMessage(httpError);
			ToastService.Notify(ToastMessages.Error(errorMessage));
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}

		isUploading = false;
	}

	private async Task ShowModal() => await modal!.ShowAsync();

	private async Task HideModal() => await modal!.HideAsync();
}

