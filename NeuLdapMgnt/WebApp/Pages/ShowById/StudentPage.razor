@page "/students/{id}"

<PageTitle>@_student.FullName</PageTitle>

@if (_isLoading)
{
	<Loading Text="Loading student"/>
}
else
{
	<h3>[@_student.Class] @_student.FullName</h3>
	<FormStudent Student="_student" OnSubmit="OnSubmit" IsReadonly="true" CanDelete="true" OnDelete="OnDelete"/>
	<ConfirmDialog @ref="_dialog"/>
}

@code {
	[Parameter] public string Id { get; set; } = null!;

	private Student       _student   = new();
	private ConfirmDialog _dialog    = default!;
	private bool          _isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);
		long.TryParse(Id, out long id);

		var searchedStudent = await StudentService.FetchStudentAsync(id);
		if (searchedStudent is null) return;
		_student = searchedStudent;

		await LocalDbService.FetchClassesAsync();
		_isLoading = false;
	}

	private async Task<bool> OnSubmit(Student editedStudent)
	{
		if (_student.Equals(editedStudent))
		{
			ToastService.Notify(ToastMessages.Secondary($"No changes was found!"));
			return false;
		}

		var parameters = new Dictionary<string, object>();
		parameters.Add("StudentOriginal", _student);
		parameters.Add("StudentEdited", editedStudent);

		var confirmation = await _dialog.ShowAsync<SummaryStudentEdit>("Edit this student?", parameters, DialogOptions.Edit(DialogSize.ExtraLarge));
		if (!confirmation) return false;

		_isLoading = true;
		await StudentService.UpdateStudentAsync(editedStudent);
		_isLoading = false;

		return false;
	}

	private async Task<bool> OnDelete(Student editedStudent)
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("Student", editedStudent);

		var confirmation = await _dialog.ShowAsync<SummaryStudent>("Deactivate this student?", parameters, DialogOptions.Confirm());
		if (!confirmation) return false;

		_isLoading = true;
		await LocalDbService.DeactivateUserAsync(editedStudent.Id.ToString());
		_isLoading = false;
		NavManager.NavigateTo("/students");

		return false;
	}

}
