@page "/students/{id}"

<PageTitle>@student.FullName</PageTitle>

@if (isLoading)
{
	<Loading Text="Loading student" />
}
else
{
	<h3>[@student.Class] @student.FullName</h3>
	<FormStudent TheStudent="student" OnSubmit="OnSubmit" IsReadonly="true" CanDelete="true" OnDelete="OnDelete" />
	<ConfirmDialog @ref="dialog" />
}

@code {
	[Parameter]
	public string Id { get; set; } = null!;

	private Student student = new();
	private ConfirmDialog dialog = default!;
	private bool isLoading = false;

	protected override void OnInitialized()
	{
		ApiRequests.EnsureAuthentication(NavManager);

		long id;
		long.TryParse(Id, out id);

		var searchedStudent = Lists.GetStudents().FirstOrDefault(x => x.Id.Equals(id));
		if (searchedStudent is null) return;
		student = searchedStudent;
	}

	private async Task<bool> OnSubmit(Student editedStudent)
	{
		if (student.Equals(editedStudent))
		{
			ToastService.Notify(ToastMessages.Secondary($"No changes was found!"));
			return false;
		}

		try
		{
			var parameters = new Dictionary<string, object>();
			parameters.Add("StudentOriginal", student);
			parameters.Add("StudentEdited", editedStudent);

			var confirmation = await dialog.ShowAsync<SummaryStudentEdit>("Edit student?", parameters, DialogOptions.Edit());
			if (!confirmation) return false;

			var response = await ApiRequests.UpdateStudentAsync(student.Id, editedStudent);
			if (response.IsSuccess())
			{
				ToastService.Notify(ToastMessages.Warning($"{student.FullName} was edited!", true));
				NavManager.NavigateTo("/students");
				return true;
			}

			if (response.Errors.Any())
			{
				ToastService.Notify(ToastMessages.Error(response.GetError()));
			}
		}
		catch (HttpRequestException httpError)
		{
			string errorMessage = Utils.GetErrorMessage(httpError);
			ToastService.Notify(ToastMessages.Error(errorMessage));
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}

		return false;
	}

	private async Task<bool> OnDelete(Student editedStudent)
	{
		try
		{
			var parameters = new Dictionary<string, object>();
			parameters.Add("Student", editedStudent);

			var confirmation = await dialog.ShowAsync<SummaryStudentEdit>("Delete this student?", parameters, DialogOptions.Delete());
			if (!confirmation) return false;

			var response = await ApiRequests.DeleteStudentAsync(editedStudent.Id);
			if (response.IsSuccess())
			{
				ToastService.Notify(ToastMessages.Success($"Student deleted successfully"));
				NavManager.NavigateTo("/students");
				return true;
			}

			if (response.Errors.Any())
			{
				ToastService.Notify(ToastMessages.Error(response.GetError()));
			}
		}
		catch (HttpRequestException httpError)
		{
			string errorMessage = Utils.GetErrorMessage(httpError);
			ToastService.Notify(ToastMessages.Error(errorMessage));
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}

		return false;
	}
}
