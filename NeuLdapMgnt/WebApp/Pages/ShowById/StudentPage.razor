@page "/students/{id}"

<PageTitle>@student.FullName</PageTitle>

@if (isLoading)
{
	<Loading Text="Loading student" />
}
else
{
	@if (isInactive)
	{
		<h3><strong>[Inactive]</strong></h3>
	}
	<h3>
		[@student.Class] @student.FullName
	</h3>
	<FormStudent Student="student" OnSubmit="OnSubmit" IsReadonly="true" CanDelete="true" OnDelete="OnDelete" />
	<ConfirmDialog @ref="dialog" />
}

@code {
	[Parameter]
	public string Id { get; set; } = null!;

	private Student student = new();
	private ConfirmDialog dialog = default!;
	private List<string> errorList = new();
	//TODO: Show modal errorlist
	private bool isLoading = true;
	private bool isInactive = true;

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);
		long.TryParse(Id, out long id);

		var searchedStudent = await StudentService.FetchStudent(id);
		if (searchedStudent is null) return;
		student = searchedStudent;

		await LocalDbService.FetchClasses();
		await LocalDbService.FetchInactiveUsers();
		isLoading = false;
		isInactive = LocalDbService.InactiveUsers.Contains(id.ToString());
	}

	private async Task<bool> OnSubmit(Student editedStudent)
	{
		if (student.Equals(editedStudent))
		{
			ToastService.Notify(ToastMessages.Secondary($"No changes was found!"));
			return false;
		}

		var parameters = new Dictionary<string, object>();
		parameters.Add("StudentOriginal", student);
		parameters.Add("StudentEdited", editedStudent);

		var confirmation = await dialog.ShowAsync<SummaryStudentEdit>("Edit this student?", parameters, DialogOptions.Edit(DialogSize.ExtraLarge));
		if (!confirmation) return false;

		isLoading = true;
		var response = await StudentService.UpdateStudent(editedStudent);
		errorList = response.ToList();
		isLoading = false;
		NavManager.NavigateTo("/students");

		return false;
	}

	private async Task<bool> OnDelete(Student editedStudent)
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("Student", editedStudent);

		var confirmation = await dialog.ShowAsync<SummaryStudent>("Deactivate this student?", parameters, DialogOptions.Confirm());
		if (!confirmation) return false;

		isLoading = true;
		await LocalDbService.DeactivateUser(editedStudent.Id.ToString());
		isLoading = false;
		NavManager.NavigateTo("/students");

		return false;
	}
}
