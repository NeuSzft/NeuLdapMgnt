@page "/teachers/{id}"

<PageTitle>@teacher.FullName</PageTitle>

@if (isLoading)
{
	<Loading Text="Loading teacher" />
}
else
{
	@if (teacher.Class != "-")
	{
		<h3>[@teacher.Class] @teacher.FullName</h3>
	}
	else
	{
		<h3>@teacher.FullName</h3>
	}
	<FormTeacher Teacher="teacher" OnSubmit="OnSubmit" IsReadonly="isLoading" CanDelete="true" OnDelete="OnDelete" />
	<ConfirmDialog @ref="dialog" />
}

@code {
	[Parameter]
	public string Id { get; set; } = null!;

	private Teacher teacher = new();
	private ConfirmDialog dialog = default!;
	//TODO: modalerrorlist
	private List<string> errorList = new();
	private bool isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);

		await LocalDbService.FetchClassesAsync();

		var searchedTeacher = await TeacherService.FetchTeacherAsync(Id);
		if (searchedTeacher is null) return;
		teacher = searchedTeacher;
		isLoading = false;
	}

	private async Task<bool> OnSubmit(Teacher editedTeacher)
	{
		if (teacher.Equals(editedTeacher))
		{
			ToastService.Notify(ToastMessages.Secondary($"No changes was found!"));
			return false;
		}

		var parameters = new Dictionary<string, object>();
		parameters.Add("TeacherOriginal", teacher);
		parameters.Add("TeacherEdited", editedTeacher);

		var confirmation = await dialog.ShowAsync<SummaryTeacherEdit>("Edit this teacher?", parameters, DialogOptions.Edit(DialogSize.ExtraLarge));
		if (!confirmation) return false;

		isLoading = true;
		var response = await TeacherService.UpdateTeacherAsync(editedTeacher);
		errorList = response.ToList();
		isLoading = false;
		NavManager.NavigateTo("/teachers");

		return false;
	}

	private async Task<bool> OnDelete(Teacher editedTeacher)
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("Teacher", editedTeacher);

		var confirmation = await dialog.ShowAsync<SummaryTeacher>("Deactivate this teacher?", parameters, DialogOptions.Confirm());
		if (!confirmation) return false;

		isLoading = true;
		await LocalDbService.DeactivateUserAsync(editedTeacher.Id);
		isLoading = false;
		NavManager.NavigateTo("/teachers");

		return false;
	}
}
