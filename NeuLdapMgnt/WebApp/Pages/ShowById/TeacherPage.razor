@page "/teachers/{id}"

<PageTitle>@_teacher.FullName</PageTitle>

@if (_isLoading)
{
	<Loading Text="Loading teacher"/>
}
else
{
	@if (_teacher.Class != "-")
	{
		<h3>[@_teacher.Class] @_teacher.FullName</h3>
	}
	else
	{
		<h3>@_teacher.FullName</h3>
	}

	<FormTeacher Teacher="_teacher" OnSubmit="OnSubmit" IsReadonly="@(!_isLoading)" CanDelete="true" OnDelete="OnDelete"/>
	<ConfirmDialog @ref="_dialog"/>
}

@code {
	[Parameter] public string Id { get; set; } = null!;

	private Teacher       _teacher   = new();
	private ConfirmDialog _dialog    = default!;
	private bool          _isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		ApiRequests.EnsureAuthentication(NavManager);

		await LocalDbService.FetchClassesAsync();

		var searchedTeacher = await TeacherService.FetchTeacherAsync(Id);
		if (searchedTeacher is null) return;
		_teacher = searchedTeacher;
		_isLoading = false;
	}

	private async Task<bool> OnSubmit(Teacher editedTeacher)
	{
		if (_teacher.Equals(editedTeacher))
		{
			ToastService.Notify(ToastMessages.Secondary($"No changes was found!"));
			return false;
		}

		var parameters = new Dictionary<string, object>
		{
			{ "TeacherOriginal", _teacher },
			{ "TeacherEdited", editedTeacher }
		};

		var confirmation = await _dialog.ShowAsync<SummaryTeacherEdit>("Edit this teacher?", parameters, DialogOptions.Edit(DialogSize.ExtraLarge));
		if (!confirmation) return false;

		_isLoading = true;
		await TeacherService.UpdateTeacherAsync(editedTeacher);
		_isLoading = false;

		return false;
	}

	private async Task<bool> OnDelete(Teacher editedTeacher)
	{
		var parameters = new Dictionary<string, object> { { "Teacher", editedTeacher } };

		var confirmation = await _dialog.ShowAsync<SummaryTeacher>("Deactivate this teacher?", parameters, DialogOptions.Confirm());
		if (!confirmation) return false;

		_isLoading = true;
		await LocalDbService.DeactivateUserAsync(editedTeacher.Id);
		_isLoading = false;
		NavManager.NavigateTo("/teachers");

		return false;
	}

}
