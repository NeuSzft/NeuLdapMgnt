@page "/teachers/{id}"

<PageTitle>@teacher.FullName</PageTitle>

@if (isLoading)
{
	<Loading Text="Loading teacher" />
}
else
{
	@if (teacher.Class != "-")
	{
		<h3>[@teacher.Class] @teacher.FullName</h3>
	}
	else
	{
		<h3>@teacher.FullName</h3>
	}
	<FormTeacher Teacher="teacher" OnSubmit="OnSubmit" IsReadonly="true" CanDelete="true" OnDelete="OnDelete" />
	<ConfirmDialog @ref="dialog" />
}

@code {
	[Parameter]
	public string Id { get; set; } = null!;

	private Teacher teacher = new();
	private ConfirmDialog dialog = default!;
	private bool isLoading = false;

	protected override async Task OnInitializedAsync()
	{
		isLoading = false;
		ApiRequests.EnsureAuthentication(NavManager);

		var searchedTeacher = DatabaseLocal.Teachers.FirstOrDefault(x => x.Id.Equals(Id));
		if (searchedTeacher is null) return;
		teacher = searchedTeacher;

		await FetchClasses();
		isLoading = false;
	}

	private async Task<bool> OnSubmit(Teacher editedTeacher)
	{
		if (teacher.Equals(editedTeacher))
		{
			ToastService.Notify(ToastMessages.Secondary($"No changes was found!"));
			return false;
		}

		try
		{
			var parameters = new Dictionary<string, object>();
			parameters.Add("TeacherOriginal", teacher);
			parameters.Add("TeacherEdited", editedTeacher);

			var confirmation = await dialog.ShowAsync<SummaryTeacherEdit>("Edit teacher?", parameters, DialogOptions.Edit(DialogSize.ExtraLarge));
			if (!confirmation) return false;

			var response = await ApiRequests.UpdateTeacherAsync(teacher.Id, editedTeacher);
			if (response.IsSuccess())
			{
				ToastService.Notify(ToastMessages.Success($"{teacher.FullName} was edited!"));
				NavManager.NavigateTo("/teachers");
				return true;
			}

			if (response.Errors.Any())
			{
				ToastService.Notify(ToastMessages.Error(response.GetError()));
			}
		}
		catch (HttpRequestException httpError)
		{
			string errorMessage = Utils.GetErrorMessage(httpError);
			ToastService.Notify(ToastMessages.Error(errorMessage));
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}

		return false;
	}

	private async Task<bool> OnDelete(Teacher editedTeacher)
	{
		try
		{
			var parameters = new Dictionary<string, object>();
			parameters.Add("Teacher", editedTeacher);

			var confirmation = await dialog.ShowAsync<SummaryTeacher>("Delete this teacher?", parameters, DialogOptions.Delete());
			if (!confirmation) return false;

			var response = await ApiRequests.DeleteTeacherAsync(editedTeacher.Id);
			if (response.IsSuccess())
			{
				ToastService.Notify(ToastMessages.Success($"Teacher deleted successfully"));
				NavManager.NavigateTo("/teachers");
				return true;
			}

			if (response.Errors.Any())
			{
				ToastService.Notify(ToastMessages.Error(response.GetError()));
			}
		}
		catch (HttpRequestException httpError)
		{
			string errorMessage = Utils.GetErrorMessage(httpError);
			ToastService.Notify(ToastMessages.Error(errorMessage));
		}
		catch (Exception e)
		{
			ToastService.Notify(ToastMessages.Error(e.Message));
		}

		return false;
	}

	private async Task FetchClasses()
	{
		try
		{
			DatabaseLocal.Classes.Clear();

			var response = await ApiRequests.GetClassesAsync();
			if (response.IsSuccess())
			{
				DatabaseLocal.Classes = response.Values.SelectMany(x => x).OrderBy(x => x).ToList();
			}
			if (response.Errors.Any())
			{
				await ModalService.ShowAsync(ModalOptions.Error(response.GetError()));
			}
		}
		catch (Exception e)
		{
			string message = e is HttpRequestException re ? re.GetErrorMessage() : e.Message;
			ToastService.Notify(ToastMessages.Error(message));
		}
	}
}
