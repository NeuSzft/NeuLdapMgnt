@inherits LayoutComponentBase

<ConfirmDialog @ref="dialog" />

<Modal @ref="modalEdit" title="Edit selected students" ModalType="ModalType.Warning" Size="ModalSize.Large" IsScrollable="true">
	<BodyTemplate>

	</BodyTemplate>
	<FooterTemplate>
		<ButtonDelete Text="Delete" OnClick="DeleteSelected" />
		<ButtonCancel Text="Cancel" OnClick="HideModalEdit" />
		<ButtonSave Text="Save" />
	</FooterTemplate>
</Modal>

<Modal @ref="modalErrors" title="Errors" ModalType="ModalType.Danger" Size="ModalSize.Regular" IsScrollable="true">
	<BodyTemplate>
		<CustomList List="ErrorList" />
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Secondary" @onclick="HideModalErrorList">Ok</Button>
	</FooterTemplate>
</Modal>

<div class="d-flex justify-content-between align-items-center g-2 my-2">
	<div class="d-flex flex-grow-1 flex-md-grow-0">
		<div class="input-group">
			<label class="input-group-text" for="searchbar"><i class="bi bi-funnel"></i></label>
			<div class="form-floating flex-grow-1">
				<input type="search"
					   class="form-control rounded-0 rounded-end"
					   id="searchbar"
					   @oninput="UpdateSearchQuery"
					   @bind-value="searchQuery" />
				<label for="searchbar">OM, Name, Class</label>
			</div>
		</div>
	</div>
	<div class="ms-2">
		<ButtonEdit OnClick="ShowModalEdit" IsDisabled="isStudentSelected" Text="Edit selected" />
	</div>
</div>
@if (isDeleting)
{
	<Loading Text="Deleting students" />
}
else
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th class="user-select-none text-wrap col-1" role="button" @onclick="SelectAllStudents">
					@if (!AreAllFilteredStudentsSelected())
					{
						<span>Select all (@selectedStudents.Count/@filteredStudents.Count)</span>
					}
					else
					{
						<span>Deselect all (@selectedStudents.Count/@filteredStudents.Count)</span>
					}
				</th>
				<th class="user-select-none" role="button" @onclick="@(() => SortTable("Id"))">
					OM
					@if (sortBy == "Id")
					{
						<i class="bi @GetSortIcon(isAscending)"></i>
					}
				</th>
				<th class="user-select-none" role="button" @onclick="@(() => SortTable("Name"))">
					Name
					@if (sortBy == "Name")
					{
						<i class="bi @GetSortIcon(isAscending)"></i>
					}
				</th>
				<th class="user-select-none" role="button" @onclick="@(() => SortTable("Class"))">
					Class
					@if (sortBy == "Class")
					{
						<i class="bi @GetSortIcon(isAscending)"></i>
					}
				</th>
				<th class="user-select-none text-end">Inspect |  Edit</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var student in filteredStudents)
			{
				<tr>
					<td>
						<input class="form-check-input m-auto"
							   type="checkbox"
							   checked="@selectedStudents.Contains(student)"
							   @onchange="() => SelectStudent(student)" />
					</td>
					<td>@student.Id</td>
					<td>@student.FullName</td>
					<td>@student.Class</td>
					<td class="text-end">
						<ButtonInspect OnClick="InspectStudent" Student="@student" />
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	[Parameter]
	public List<Student> Students { get; set; } = new();

	private List<Student> filteredStudents = new();
	private List<Student> selectedStudents = new();
	private Timer? searchDelayTimer;

	private ConfirmDialog dialog = default!;
	private Modal modalEdit = default!;
	private Modal modalErrors = default!;
	private List<string> ErrorList = new();

	private string? searchQuery = string.Empty;
	private string sortBy = "Id";

	private bool isAscending = true;
	private bool isDeleting = false;
	private bool isStudentSelected => !selectedStudents.Any();

	protected override void OnInitialized()
	{
		filteredStudents = Students.ToList();
		searchDelayTimer = new Timer(Callback, null, Timeout.Infinite, Timeout.Infinite);
	}

	private void SelectStudent(Student student)
	{
		if (selectedStudents.Contains(student))
		{
			selectedStudents.Remove(student);
		}
		else
		{
			selectedStudents.Add(student);
		}
	}

	private void SelectAllStudents()
	{
		if (AreAllFilteredStudentsSelected())
		{
			selectedStudents.Clear();
		}
		else
		{
			selectedStudents = filteredStudents.ToList();
		}

		StateHasChanged();
	}

	private void EditSelected()
	{
		selectedStudents.ForEach(x => Console.WriteLine(x.Id));
	}

	private async Task DeleteSelected()
	{
		if (!selectedStudents.Any()) return;

		var parameters = new Dictionary<string, object>();
		parameters.Add("List", selectedStudents.Select(x => $"{x.Id}: {x.FullName}").ToList());

		var confirmation = await dialog.ShowAsync<CustomList>(
			title: $"Delete ({selectedStudents.Count}) students?",
			parameters: parameters,
			confirmDialogOptions: DialogOptions.Delete()
		);

		if (!confirmation) return;

		isDeleting = true;
		await HideModalEdit();

		try
		{
			foreach (var student in selectedStudents)
			{
				var response = await ApiRequests.DeleteStudentAsync(student.Id);
				if (response.IsSuccess())
				{
					Students.Remove(student);
				}
				else
				{
					ErrorList.Add(response.GetError());
				}
			}
			isDeleting = false;
		}
		catch (Exception e)
		{
			await ModalService.ShowAsync(ModalOptions.Error(e.Message));
		}

		filteredStudents = Students.ToList();
		selectedStudents.Clear();

		if (ErrorList.Any())
		{
			await modalErrors.ShowAsync();
		}
		else
		{
			ToastService.Notify(ToastMessages.Success("Selected studenst were deleted!"));
		}
	}

	private void GetFilteredStudents()
	{
		if (string.IsNullOrWhiteSpace(searchQuery))
		{
			filteredStudents = Students.ToList();
		}
		else
		{
			filteredStudents = Students
				.Where(x => x.Id.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
							|| x.FullName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
							|| x.Class.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}

		selectedStudents.Clear();
	}

	private void Callback(object? state)
	{
		InvokeAsync(() =>
		{
			GetFilteredStudents();
			StateHasChanged();
		});
	}

	private void UpdateSearchQuery(ChangeEventArgs e)
	{
		searchQuery = e.Value?.ToString();
		searchDelayTimer?.Change(400, Timeout.Infinite);
	}

	private bool AreAllFilteredStudentsSelected()
	{
		return selectedStudents.Count > 0
			&& selectedStudents.Count.Equals(filteredStudents.Count);
	}

	private void ShowStudent(string id) => NavManager.NavigateTo($"/students/{id}");

	private void InspectStudent(Student student) => ShowStudent(student.Id.ToString());

	private string GetSortIcon(bool asc) => asc ? "bi-sort-up" : "bi-sort-down";

	private void SortTable(string propertyName)
	{
		if (sortBy == propertyName)
		{
			isAscending = !isAscending;
		}
		else
		{
			sortBy = propertyName;
			isAscending = true;
		}

		switch (propertyName)
		{
			case "Id":
				filteredStudents = isAscending
					? filteredStudents.OrderBy(x => x.Id).ToList()
					: filteredStudents.OrderByDescending(x => x.Id).ToList();
				break;

			case "Name":
				filteredStudents = isAscending
					? filteredStudents.OrderBy(x => x.FullName).ToList()
					: filteredStudents.OrderByDescending(x => x.FullName).ToList();
				break;

			case "Class":
				filteredStudents = isAscending
					? filteredStudents
							.OrderBy(x => x.ClassYearOrderValue())
							.ThenBy(x => x.ClassGroup)
							.ToList()
					: filteredStudents
							.OrderByDescending(x => x.ClassYearOrderValue())
							.ThenByDescending(x => x.ClassGroup)
							.ToList();
				break;

			default:
				break;
		}

		StateHasChanged();
	}

	private async Task ShowModalEdit()
	{
		if (modalEdit is null) return;
		await modalEdit.ShowAsync();
	}

	private async Task HideModalEdit()
	{
		if (modalEdit is null) return;
		await modalEdit.HideAsync();
		StateHasChanged();
	}

	private async Task ShowModalErrorList()
	{
		if (modalErrors is null) return;
		await modalErrors.ShowAsync();
	}

	private async Task HideModalErrorList()
	{
		if (modalErrors is null) return;
		await modalErrors.HideAsync();

		if (modalEdit is null) return;
		await modalEdit.HideAsync();
	}

	public void Dispose() => searchDelayTimer?.Dispose();
}

