@inherits LayoutComponentBase

<EditForm Model="@studentUpdated" OnValidSubmit="HandleValidSubmit" class="d-flex flex-column gap-2 my-2">
	<DataAnnotationsValidator />

	<div class="text-end">
		@if (IsReadonly)
		{
			<ButtonEdit OnClick="ToggleReadonly" Text="Edit" />
		}
	</div>

	<div class="form-floating">
		<NumberInput Disabled="@(CanDelete || IsReadonly)"
					 @bind-Value="studentUpdated!.Id"
					 TValue="long"
					 Min="@Student.AllowedIdRange.Min"
					 Max="@Student.AllowedIdRange.Max"
					 id="student-id" />
		<label for="student-id">OM</label>
		<ValidationMessage For="() => studentUpdated.Id" />
	</div>

	<div class="input-group gap-2">
		<label class="input-group-text user-select-none col-12 rounded gap-2" for="givenName">
			Name
			@if (!IsReadonly && studentUpdated.FullName.Length > 2)
			{
				<span>[@studentUpdated.FullName]</span>

			}
		</label>

		<div class="d-flex flex-column flex-md-row gap-2 w-100">
			<div class="form-floating w-100">
				<InputText class="form-control rounded" disabled="@IsReadonly" placeholder="First name" id="givenName" @bind-Value="studentUpdated.FirstName" />
				<label for="givenName">First</label>
				<ValidationMessage For="() => studentUpdated.FirstName" />
			</div>
			<div class="form-floating w-100">
				<InputText class="form-control rounded" disabled="@IsReadonly" placeholder="Last name" id="lastName" @bind-Value="studentUpdated.LastName" />
				<label for="lastName">Last</label>
				<ValidationMessage For="() => studentUpdated.LastName" />
			</div>
			<div class="form-floating w-100">
				<InputText class="form-control rounded" disabled="@IsReadonly" placeholder="Middle name" id="middleName" @bind-Value="studentUpdated.MiddleName" />
				<label for="middleName">Middle</label>
				<ValidationMessage For="() => studentUpdated.MiddleName" />
			</div>
		</div>
	</div>

	<div class="input-group gap-2 align-items-center">
		<label class="input-group-text user-select-none w-100 rounded gap-2" for="class-year-select">
			Class
			@if (!IsReadonly && studentUpdated.ClassYear != string.Empty)
			{
				<br />
				<span>[@studentUpdated.Class]</span>
			}
		</label>
		<div class="d-flex flex-column flex-md-row gap-2 w-100">
			<div class="form-floating w-100">
				<InputSelect class="form-select rounded" id="class-year-select" disabled="@IsReadonly" @bind-Value="studentUpdated.ClassYear">
					@foreach (string year in Student.AllowedYears)
					{
						<option value="@year" selected="@year.Equals(studentUpdated.ClassYear)">@year</option>
					}
				</InputSelect>
				<label for="class-year-select">Year</label>
			</div>
			<div class="form-floating w-100">
				<InputSelect class="form-select rounded" id="class-group-select" disabled="@IsReadonly" @bind-Value="studentUpdated.ClassGroup">
					@foreach (var group in Student.AllowedGroups)
					{
						<option value="@group" selected="@group.Equals(studentUpdated.ClassGroup)">@group</option>
					}
				</InputSelect>
				<label for="class-group-select">Group</label>
			</div>
		</div>
	</div>
	<ValidationMessage For="() => studentUpdated.Class" />

	<div class="form-floating">
		<InputText class="form-control" disabled="@IsReadonly" id="username" @bind-Value="studentUpdated.Username" />
		<label for="username">Username</label>
		<ValidationMessage For="() => studentUpdated.Username" />
	</div>

	<div class="form-floating">
		<NumberInput Disabled="@IsReadonly"
					 @bind-Value="studentUpdated.Uid"
					 TValue="int"
					 Min="@Student.AllowedUidRange.Min"
					 Max="@Student.AllowedUidRange.Max"
					 id="user-id" />
		<label for="user-id">User Id</label>
		<ValidationMessage For="() => studentUpdated.Uid" />
	</div>

	<div class="form-floating">
		<NumberInput Disabled="@IsReadonly"
					 @bind-Value="studentUpdated.Gid"
					 TValue="int"
					 Min="@Student.AllowedGidRange.Min"
					 Max="@Student.AllowedGidRange.Max"
					 id="group-id" />
		<label for="group-id">Group Id</label>
		<ValidationMessage For="() => studentUpdated.Gid" />
	</div>

	<div class="form-floating">
		<InputText class="form-control" disabled="@IsReadonly" id="email" placeholder="Student@example.com" @bind-Value="studentUpdated.Email" />
		<label for="email">Email</label>
		<ValidationMessage For="() => studentUpdated.Email" />
	</div>

	<div class="form-floating">
		<InputText class="form-control" disabled="@IsReadonly" id="home-directory" placeholder="/home/Student" @bind-Value="studentUpdated.HomeDirectory" />
		<label for="home-directory">Directory</label>
		<ValidationMessage For="() => studentUpdated.HomeDirectory" />
	</div>

	<div class="form-floating">
		<InputText type="password" class="form-control" disabled="@IsReadonly" id="password" @bind-Value="studentUpdated.Password" />
		<label for="password">Password</label>
		<ValidationMessage For="() => studentUpdated.Password" />
	</div>

	@if (!IsReadonly)
	{
		<div class="d-flex justify-content-end gap-2">
			@if (CanDelete)
			{
				<ButtonDelete OnClick="DeleteStudent" Text="Delete" />
			}
			<ButtonCancel OnClick="ToggleReadonly" Text="Cancel" />
			<ButtonSubmit Text="Submit" />
		</div>
	}
	</EditForm>

	@code {
	[Parameter]
	public Student TheStudent { get; set; } = StudentFactory.CreateEmptyStudent().Build();

	[Parameter]
	public EventCallback<Student> OnSubmit { get; set; }

	[Parameter]
	public bool IsReadonly { get; set; }

	[Parameter]
	public bool CanDelete { get; set; }

	private Student studentOriginal = StudentFactory.CreateEmptyStudent().Build();
	private Student studentUpdated = StudentFactory.CreateEmptyStudent().Build();

	protected override void OnInitialized()
	{
		studentOriginal = Utils.GetClone<Student>(TheStudent)!;
		studentUpdated = Utils.GetClone<Student>(studentOriginal)!;
	}

	protected override void OnParametersSet() => StateHasChanged();

	private async Task HandleValidSubmit() => await OnSubmit.InvokeAsync(studentUpdated);

	private async Task DeleteStudent()
	{
		try
		{
			var response = await ApiRequests.DeleteStudentAsync(TheStudent.Id);
			if (response is null)
			{
				// Add a modal to display no response error.
				Console.WriteLine("No response from the api.");
				return;
			}

			if (response.IsSuccess())
			{
				// Add a modal to display successful deletion.
				Console.WriteLine($"Successfully deleted: {TheStudent.Id}");
				NavManager.NavigateTo("/students");
			}

			if (response.Errors.Any())
			{
				// Add a modal to display all errors.
				Console.WriteLine("Errors:\n" + string.Join('\n', response.Errors));
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}

	private void ToggleReadonly()
	{
		studentUpdated = Utils.GetClone<Student>(studentOriginal)!;
		IsReadonly = !IsReadonly;
	}
}
