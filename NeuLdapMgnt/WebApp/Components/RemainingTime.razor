@inject JwtService JwtService
@implements IDisposable

<div class="progress" role="progressbar">
	<div class="progress-bar ps-3 text-start fw-bold rounded-0"
		 style="@($"width: {progressPercent}%;position: fixed; z-index: 1050; background-color: #712CF9;")"
		 aria-valuenow="@progressPercent"
		 aria-valuemin="0"
		 aria-valuemax="100">
		@remainingTimeString
	</div>
</div>

@code {
	private Timer? timer;
	private TimeSpan remainingTime;
	private string remainingTimeString => remainingTime.ToString(@"mm\:ss");
	private double progressPercent;
	protected override void OnInitialized()
	{
		timer = new Timer(_ => InvokeAsync(() =>
		{
			UpdateRemainingTime();
			UpdateProgress();
			StateHasChanged();
		}), null, 0, 1000);
	}

	private void UpdateRemainingTime()
	{
		if (ApiRequests.CurrentToken != null)
		{
			remainingTime = JwtService.GetRemainingTime(ApiRequests.CurrentToken);
		}
	}

	private void UpdateProgress()
	{
		var totalTime = TimeSpan.FromMinutes(10);
		progressPercent = 100 * (remainingTime.TotalSeconds / totalTime.TotalSeconds);
	}

	public void Dispose()
	{
		timer?.Dispose();
	}
}
