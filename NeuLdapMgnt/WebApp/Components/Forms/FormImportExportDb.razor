@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime

<div class="d-flex flex-column gap-2 my-2">
	<form class="gap-2 p-4 border rounded">
		<div class="mb-3">
			<h3>Import a JSON dump file into the database</h3>
		</div>
		<div class="mb-3">
			<FileUpload OnFileUploaded="OnFileImported" AllowedExtensions="allowedExtension"/>
		</div>
		<div class="row align-items-center">
			<div class="col-12 mb-3">
				<InputRadioGroup Name="import-mode" @bind-Value="_importMode" class="form-control">
					<div class="d-flex">
						<InputRadio Name="import-mode" Value="0" id="import-mode-0" class="me-2"/>
						<label for="import-mode-0">Add entries that do not exist yet.</label>
					</div>
					<div class="d-flex">
						<InputRadio Name="import-mode" Value="1" id="import-mode-1" class="me-2"/>
						<label for="import-mode-1">Overwrite existing entries.</label>
					</div>
					<div class="d-flex">
						<InputRadio Name="import-mode" Value="2" id="import-mode-2" class="me-2"/>
						<label for="import-mode-2">Erase database before importing.</label>
					</div>
				</InputRadioGroup>
			</div>
			<div class="col">
				@if (isUploading) {
					<Button Color="ButtonColor.Primary" Outline="true" Disabled="true">
						<Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary"/>
					</Button>
				}
				else {
					<ButtonOk Color="ButtonColor.Primary" OnClick="@ImportDatabase" IsDisabled="@(_importedJson.Length == 0)" Text="Upload"/>
				}
			</div>
		</div>
	</form>

	<form class="gap-2 p-4 border rounded">
		<div class="mb-3">
			<h3>Export the database into a JSON dump file</h3>
		</div>
		<div class="mb-3">
			<Button @onclick="ExportDatabase" class="btn btn-primary">Export</Button>
		</div>
		@if (_exportedJson.Length > 0) {
			<div class="mb-3">
				<InputTextArea @bind-Value="_exportedJson" class="form-control" rows="12" style="resize: none" readonly/>
			</div>
			<div class="mb-3">
				<Button @onclick="Download" class="btn btn-primary">Download</Button>
			</div>
		}
	</form>
</div>

@code {
	private DateTime _lastExportTime;

	private string _exportedJson = string.Empty;

	private string _importedJson = string.Empty;

	private int _importMode = 0;

	private string[] allowedExtension = { ".json" };

	private bool isUploading = false;

	[Parameter] public Func<ModalType, string, IEnumerable<string>, Task>? ShowModal { get; set; }

	private async Task OnFileImported(IBrowserFile file) {
		await using Stream stream = file.OpenReadStream();
		using StreamReader reader = new(stream);
		_importedJson = await reader.ReadToEndAsync();
	}

	private async Task ExportDatabase() {
		RequestResult<LdapDbDump> result = await ApiRequests.SendRequestAsync<LdapDbDump>(HttpMethod.Get, "/api/database");

		if (result.IsSuccess()) {
			_lastExportTime = DateTime.Now;
			_exportedJson = JsonSerializer.Serialize(result.Values.FirstOrDefault(), new JsonSerializerOptions { WriteIndented = true });
			ToastService.Notify(ToastMessages.Success("Successfully exported database"));
		}
		else if (ShowModal is not null)
			await ShowModal(ModalType.Danger, "Export Errors", result.Errors);
	}

	private async Task ImportDatabase() {
		isUploading = true;

		try {
			LdapDbDump?   dump = JsonSerializer.Deserialize<LdapDbDump>(_importedJson);
			RequestResult result;

			switch (_importMode) {
				case 1:
					result = await ApiRequests.SendRequestAsync(HttpMethod.Put, "/api/database", dump);
					if (ShowModal is not null && result.IsFailure())
						await ShowModal(ModalType.Danger, "Import Errors", result.Errors);
					break;
				case 2:
					await ApiRequests.SendRequestAsync(HttpMethod.Delete, "/api/database");
					result = await ApiRequests.SendRequestAsync(HttpMethod.Post, "/api/database", dump);
					if (ShowModal is not null && result.IsFailure())
						await ShowModal(ModalType.Danger, "Import Errors", result.Errors);
					break;
				default:
					result = await ApiRequests.SendRequestAsync(HttpMethod.Post, "/api/database", dump);
					if (ShowModal is not null && result.IsFailure())
						await ShowModal(ModalType.Warning, "Import Conflicts", result.Errors);
					break;
			}

			ToastService.Notify(result.IsSuccess()
				? ToastMessages.Success("Successfully imported database dump")
				: ToastMessages.Warning("Imported database dump with partial success"));
		}
		catch (Exception e) {
			ToastService.Notify(ToastMessages.Error(e.Message));
		}

		isUploading = false;
	}

	private async Task Download() {
		await JsRuntime.InvokeVoidAsync("downloadJsonFile", $"database-{_lastExportTime:yyyy.MM.dd-HH_mm_ss}.json", _exportedJson);
	}

}
