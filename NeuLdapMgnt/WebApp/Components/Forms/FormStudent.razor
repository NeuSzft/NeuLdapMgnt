@inherits LayoutComponentBase

<EditForm Model="@studentUpdated" OnValidSubmit="HandleOnSubmit" class="d-flex flex-column gap-2 my-2">
	<DataAnnotationsValidator />

	<div class="text-end">
		@if (IsReadonly)
		{
			<ButtonEdit OnClick="ToggleEditMode" Text="Edit" IsDisabled="isEditModeEnabled" />
		}
	</div>

	<div class="form-floating">
		<NumberInput Disabled="@(CanDelete || IsReadonly || isAction)"
					 @bind-Value="studentUpdated!.Id"
					 TValue="long"
					 Min="@Student.OmMinValue"
					 Max="@Student.OmMaxValue"
					 id="student-id" />
		<label for="student-id">OM</label>
		<ValidationMessage For="() => studentUpdated.Id" id="student-om-validation-message" />
	</div>

	<div class="input-group gap-2">
		<label class="input-group-text user-select-none col-12 rounded gap-2" for="first-name">
			Name
			@if (!IsReadonly && studentUpdated.FullName.Length > 2)
			{
				<span>[@studentUpdated.FullName]</span>
			}
		</label>

		<div class="d-flex flex-column flex-md-row gap-2 w-100">
			<div class="form-floating w-100">
				<InstantInputText class="form-control rounded" disabled="@(IsReadonly || isAction)" id="first-name" @bind-Value="studentUpdated.FirstName" />
				<label for="first-name">First</label>
				<ValidationMessage For="() => studentUpdated.FirstName" id="student-first-name-validation-message" />
			</div>
			<div class="form-floating w-100">
				<InstantInputText class="form-control rounded" disabled="@(IsReadonly || isAction)" id="last-name" @bind-Value="studentUpdated.LastName" />
				<label for="last-name">Last</label>
				<ValidationMessage For="() => studentUpdated.LastName" id="student-last-name-validation-message" />
			</div>
			<div class="form-floating w-100">
				<InstantInputText class="form-control rounded" disabled="@(IsReadonly || isAction)" id="middle-name" @bind-Value="studentUpdated.MiddleName" />
				<label for="middle-name">Middle</label>
				<ValidationMessage For="() => studentUpdated.MiddleName" id="student-middle-name-validation-message" />
			</div>
		</div>
	</div>

	<div class="input-group gap-2 align-items-center">
		<label class="input-group-text user-select-none w-100 rounded gap-2" for="class-year-select">
			Class
			@if (!IsReadonly && studentUpdated.ClassYear != string.Empty)
			{
				<br />
				<span>[@studentUpdated.Class]</span>
			}
		</label>
		<div class="d-flex flex-column flex-md-row gap-2 w-100">
			<div class="form-floating w-100">
				<InputSelect class="form-select rounded" id="class-year-select" disabled="@(IsReadonly || isAction)" @bind-Value="studentUpdated.ClassYear">
					@foreach (string year in Student.ClassYears)
					{
						<option value="@year" selected="@year.Equals(studentUpdated.ClassYear)">@year</option>
					}
				</InputSelect>
				<label for="class-year-select">Year</label>
			</div>
			<div class="form-floating w-100">
				<InputSelect class="form-select rounded" id="class-group-select" disabled="@(IsReadonly || isAction)" @bind-Value="studentUpdated.ClassGroup">
					@foreach (var group in Student.ClassGroups)
					{
						<option value="@group" selected="@group.Equals(studentUpdated.ClassGroup)">@group</option>
					}
				</InputSelect>
				<label for="class-group-select">Group</label>
			</div>
		</div>
	</div>
	<ValidationMessage For="() => studentUpdated.Class" id="student-class-validation-message" />

	<div class="form-floating">
		<InstantInputText type="email" class="form-control" disabled="@(IsReadonly || isAction)" id="student-email" @bind-Value="studentUpdated.Email" />
		<label for="student-email">Email</label>
		<ValidationMessage For="() => studentUpdated.Email" id="student-email-validation-message" />
	</div>

	<div class="form-floating">
		<InstantInputText type="password" class="form-control" disabled="@(IsReadonly || isAction)" id="password" @bind-Value="studentUpdated.Password" />
		<label for="password">Password</label>
		<ValidationMessage For="() => studentUpdated.Password" id="student-password-validation-message" />
	</div>

	@if (!IsReadonly)
	{
		<div class="d-flex justify-content-end gap-2">
			@if (CanDelete)
			{
				@if (isDeleting)
				{
					<Button Color="ButtonColor.Danger" Outline="true" Disabled="true">
						<Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Danger" />
					</Button>
				}
				else
				{
					<ButtonDelete OnClick="HandleOnDelete" Text="Delete" IsDisabled="isAction" />
				}
			}

			<ButtonCancel OnClick="ToggleEditMode" Text="Revert" IsDisabled="isAction" />

			@if (isSubmitting)
			{
				<Button Color="ButtonColor.Success" Outline="true" Disabled="true">
					<Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Success" />
				</Button>
			}
			else
			{
				<ButtonSubmit Text="Submit" IsDisabled="isAction" />
			}
		</div>
	}
	</EditForm>

@code {
	[Parameter]
	public Student Student { get; set; } = new();

	[Parameter]
	public Func<Student, Task<bool>> OnSubmit { get; set; } = default!;

	[Parameter]
	public Func<Student, Task<bool>> OnDelete { get; set; } = default!;

	[Parameter]
	public bool IsReadonly { get; set; }

	[Parameter]
	public bool CanDelete { get; set; }

	private Student studentOriginal = new();
	private Student studentUpdated = new();
	private bool isDeleting = false;
	private bool isSubmitting = false;
	private bool isAction => isDeleting || isSubmitting;
	private bool isEditModeEnabled = false;

	protected override void OnInitialized()
	{
		studentOriginal = Utils.GetClone<Student>(Student)!;
		studentUpdated = Utils.GetClone<Student>(studentOriginal)!;
	}

	private async Task HandleOnSubmit()
	{
		isSubmitting = true;
		bool isSubmitted = await OnSubmit.Invoke(studentUpdated);
		isSubmitting = false;
	}


	private async Task HandleOnDelete()
	{
		isDeleting = true;
		bool isDeleted = await OnDelete.Invoke(studentUpdated);
		isDeleting = false;

		if (!isDeleted) return;
		NavManager.NavigateTo("/students");
	}


	private void ToggleEditMode()
	{
		studentUpdated = Utils.GetClone<Student>(studentOriginal)!;
		if (isEditModeEnabled || IsReadonly == false) return;
		isEditModeEnabled = true;
		IsReadonly = !IsReadonly;
	}
}
