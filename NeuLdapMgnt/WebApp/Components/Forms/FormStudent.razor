@inherits LayoutComponentBase

<EditForm Model="@_studentUpdated" OnValidSubmit="HandleOnSubmit" class="d-flex flex-column gap-2 my-2">
	<DataAnnotationsValidator/>

	<div class="text-end">
		@if (IsReadonly)
		{
			<ButtonEdit OnClick="ToggleEditMode" Text="Edit" IsDisabled="_isEditModeEnabled"/>
		}
	</div>

	<div class="form-floating">
		<NumberInput Disabled="@(CanDelete || IsReadonly || IsAction)"
		             @bind-Value="_studentUpdated!.Id"
		             TValue="long"
		             Min="@Student.IdMinValue"
		             Max="@Student.IdMaxValue"
		             id="student-id"/>
		<label for="student-id">ID</label>
		<ValidationMessage For="() => _studentUpdated.Id" id="student-id-validation-message"/>
	</div>

	<div class="input-group gap-2">
		<label class="input-group-text user-select-none col-12 rounded gap-2" for="first-name">
			Name
			@if (!IsReadonly && _studentUpdated.FullName.Length > 2)
			{
				<span>[@_studentUpdated.FullName]</span>
			}
		</label>

		<div class="d-flex flex-column flex-md-row gap-2 w-100">
			<div class="form-floating w-100">
				<InstantInputText class="form-control rounded" disabled="@(IsReadonly || IsAction)" id="first-name" @bind-Value="_studentUpdated.FirstName"/>
				<label for="first-name">First</label>
				<ValidationMessage For="() => _studentUpdated.FirstName" id="student-first-name-validation-message"/>
			</div>
			<div class="form-floating w-100">
				<InstantInputText class="form-control rounded" disabled="@(IsReadonly || IsAction)" id="middle-name" @bind-Value="_studentUpdated.MiddleName"/>
				<label for="middle-name">Middle</label>
				<ValidationMessage For="() => _studentUpdated.MiddleName" id="student-middle-name-validation-message"/>
			</div>
			<div class="form-floating w-100">
				<InstantInputText class="form-control rounded" disabled="@(IsReadonly || IsAction)" id="last-name" @bind-Value="_studentUpdated.LastName"/>
				<label for="last-name">Last</label>
				<ValidationMessage For="() => _studentUpdated.LastName" id="student-last-name-validation-message"/>
			</div>
		</div>
	</div>

	<div class="form-floating">
		<InputSelect class="form-select rounded" id="class-select" disabled="@(IsReadonly || IsAction)" @bind-Value="_studentUpdated.Class">
			<option value="@string.Empty" disabled>Select class</option>
			@foreach (var cls in LocalDbService.Classes)
			{
				<option value="@cls">@cls</option>
			}
		</InputSelect>
		<label for="class-select">Class</label>
		<ValidationMessage For="() => _studentUpdated.Class" id="student-class-validation-message"/>
	</div>

	<div class="form-floating">
		<InstantInputText class="form-control" disabled="@(IsReadonly || IsAction)" id="student-email" @bind-Value="_studentUpdated.Email"/>
		<label for="student-email">Email</label>
		<ValidationMessage For="() => _studentUpdated.Email" id="student-email-validation-message"/>
	</div>

	@if (!IsReadonly) {
		@if (string.IsNullOrWhiteSpace(_studentUpdated.Password)) {
			<small class="text-muted">
				Setting the password is optional. When left empty it will be ignored.
			</small>
		}

		<PasswordInput @bind-Value="_studentUpdated.Password" IdBase="student" InputsDisabled="@IsAction"/>

		<div class="d-flex justify-content-end gap-2">
			@if (CanDelete)
			{
				@if (_isDeleting)
				{
					<ButtonLoading ButtonColor="ButtonColor.Danger" SpinnerColor="SpinnerColor.Danger"/>
				}
				else
				{
					<ButtonDelete OnClick="HandleOnDelete" Text="Deactivate" IsDisabled="IsAction"/>
				}
			}

			<ButtonCancel OnClick="ToggleEditMode" Text="Revert" IsDisabled="IsAction"/>

			@if (_isSubmitting)
			{
				<ButtonLoading ButtonColor="ButtonColor.Success" SpinnerColor="SpinnerColor.Success"/>
			}
			else
			{
				<ButtonSubmit Text="Submit" IsDisabled="IsAction"/>
			}
		</div>
	}
</EditForm>

@code {
	[Parameter] public Student Student { get; set; } = new();

	[Parameter] public Func<Student, Task<bool>> OnSubmit { get; set; } = default!;

	[Parameter] public Func<Student, Task<bool>> OnDelete { get; set; } = default!;

	[Parameter] public bool IsReadonly { get; set; }

	[Parameter] public bool CanDelete { get; set; }

	private Student _studentOriginal = new();
	private Student _studentUpdated  = new();

	private bool _isDeleting;
	private bool _isSubmitting;
	private bool _isEditModeEnabled;
	private bool IsAction => _isDeleting || _isSubmitting;

	protected override void OnInitialized()
	{
		_studentOriginal = Utils.GetClone(Student)!;
		_studentUpdated = Utils.GetClone(_studentOriginal)!;
	}

	private async Task HandleOnSubmit()
	{
		_isSubmitting = true;
		await OnSubmit.Invoke(_studentUpdated);
		_isSubmitting = false;
	}

	private async Task HandleOnDelete()
	{
		_isDeleting = true;
		await OnDelete.Invoke(_studentUpdated);
		_isDeleting = false;
	}

	private void ToggleEditMode()
	{
		_studentUpdated = Utils.GetClone(_studentOriginal)!;
		if (_isEditModeEnabled || IsReadonly == false) return;
		_isEditModeEnabled = true;
		IsReadonly = !IsReadonly;
	}

}
