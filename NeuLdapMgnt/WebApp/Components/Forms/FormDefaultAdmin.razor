@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@inherits LayoutComponentBase

<EditForm EditContext="_editContext" OnValidSubmit="Confirm" class="d-flex flex-column gap-2 p-4 border rounded">
	<DataAnnotationsValidator/>

	<h5 class="mb-3">Change the password of the Default Admin.</h5>

	<div class="form-floating">
		<InstantInputText @bind-Value="_adminPasswords.Password" type=@(_showPasswords ? "text" : "password") id="default-admin-password-input" class="form-control"/>
		<label for="default-admin-password-input">New Password</label>
		<ValidationMessage For="() => _adminPasswords.Password"/>
	</div>

	<div class="form-floating">
		<InstantInputText @bind-Value="_adminPasswords.ConfirmPassword" type=@(_showPasswords ? "text" : "password") id="default-admin-password-confirm-input" class="form-control"/>
		<label for="default-admin-password-confirm-input">Confirm New Password</label>
		<ValidationMessage For="() => _adminPasswords.ConfirmPassword"/>
	</div>

	<div class="form-check">
		<InputCheckbox @bind-Value="_showPasswords" class="form-check-input" id="show-password-checkbox"/>
		<label class="form-check-label" for="show-password-checkbox">Show passwords</label>
	</div>

	<div class="d-flex justify-content-start gap-2 mt-4">
		<ButtonSubmit Text="Change Password"/>
		<ButtonCancel Text="Cancel" OnClick="@Cancel"/>
	</div>
</EditForm>

@code {

	private class AdminPasswords {
		[Required(ErrorMessage = "Password is required.")]
		[Password]
		[PasswordPropertyText]
		public string Password { get; set; } = string.Empty;

		[Compare("Password", ErrorMessage = "Passwords do not match.")]
		public string ConfirmPassword { get; set; } = string.Empty;
	}

	private bool _showPasswords;

	private AdminPasswords _adminPasswords = new();

	private EditContext _editContext = new(0);

	private void ResetEditContext() => _editContext = new(_adminPasswords);

	private async Task Confirm() {
		RequestResult result = await ApiRequests.SendStringAsync(HttpMethod.Put, "/api/default-admin/password", _adminPasswords.Password);
		ToastService.Notify(result.IsSuccess()
			? ToastMessages.Success("Successfully updated the Default Admin password.")
			: ToastMessages.Error(result.GetError())
		);
	}

	private void Cancel() {
		_adminPasswords.ConfirmPassword = _adminPasswords.Password = string.Empty;
		ResetEditContext();
	}

	protected override void OnInitialized() {
		ResetEditContext();
	}

}
