@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@using System.Reflection
@inherits InputBase<string>

<div @ref="Element" class="@Class">
	<div class="form-floating">
		<input @oninput="EventCallback.Factory.CreateBinder(this, SetCurrentValue, CurrentValue!)" type="@InputType" value="@CurrentValue" id="@IdBase-password" class="form-control"/>
		<label for="@IdBase-password">New Password</label>
		<ValidationMessage For="ValueExpression"/>
	</div>

	<div class="form-floating">
		<input @oninput="EventCallback.Factory.CreateBinder(this, SetConfirmValue, ConfirmValue)" type="@InputType" value="@ConfirmValue" id="@IdBase-confirm-password" class="form-control"/>
		<label for="@IdBase-confirm-password">Confirm New Password</label>
		<ValidationMessage For="() => ConfirmValue"/>
	</div>

	<div class="form-check">
		<InputCheckbox @bind-Value="ShowAsPlainText" class="form-check-input" id="show-passwords-checkbox"/>
		<label class="form-check-label" for="show-passwords-checkbox">Show passwords</label>
	</div>
</div>

@code {

	public ElementReference Element { get; private set; }

	[Parameter] public string IdBase { get; set; } = new IdGenerator().GetNextId();

	[Parameter] public string Class { get; set; } = "d-flex flex-column gap-2";

	[Compare("Value", ErrorMessage = "Passwords do not match.")]
	public string ConfirmValue { get; set; } = string.Empty;

	public bool ShowAsPlainText { get; set; }

	private string InputType => ShowAsPlainText ? "text" : "password";

	private FieldIdentifier _confirmValueIdentifier;

	public PasswordInput() {
		Value ??= string.Empty;
		_confirmValueIdentifier = FieldIdentifier.Create(() => ConfirmValue);
	}

	private void SetCurrentValue(string? value) {
		CurrentValue = value!;
		EditContext.NotifyFieldChanged(FieldIdentifier);
		EditContext.NotifyFieldChanged(_confirmValueIdentifier);
	}

	private void SetConfirmValue(string? value) {
		ConfirmValue = value!;
		EditContext.NotifyFieldChanged(_confirmValueIdentifier);
	}

	private bool AddConfirmValueToEditContext() {
		Type type = typeof(EditContext);
		if (type.GetMethod("GetOrAddFieldState", BindingFlags.Instance | BindingFlags.NonPublic) is { } method)
			return method.Invoke(EditContext, new object[] { _confirmValueIdentifier }) is not null;
		return false;
	}

	protected override void OnInitialized() {
		AddConfirmValueToEditContext();
		EditContext.OnValidationRequested += (_, _) => EditContext.NotifyFieldChanged(_confirmValueIdentifier);
	}

	protected override bool TryParseValueFromString(string? value, out string result, [NotNullWhen(false)] out string? validationErrorMessage) {
		result = value!;

		if (EditContext.GetValidationMessages(FieldIdentifier).FirstOrDefault() is { } message) {
			validationErrorMessage = message;
			return false;
		}

		if (!Value?.Equals(ConfirmValue) ?? ConfirmValue.Length > 0) {
			validationErrorMessage = "Passwords do not match.";
			return false;
		}

		validationErrorMessage = null;
		return true;
	}

}
