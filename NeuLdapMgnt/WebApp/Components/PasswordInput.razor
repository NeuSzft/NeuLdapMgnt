@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@using System.Reflection
@inherits InputBase<string>

<div class="@Class">
	<div class="form-floating">
		<input
			@oninput="EventCallback.Factory.CreateBinder(this, SetCurrentValue, CurrentValue ?? string.Empty)"
			type="@InputType"
			value="@CurrentValue"
			id="@GetFullId("password")"
			class="form-control"
			disabled="@InputsDisabled"/>
		<label for="@GetFullId("password")">New Password</label>
	</div>

	<div class="form-floating">
		<input
			@oninput="EventCallback.Factory.CreateBinder(this, SetConfirmValue, ConfirmValue ?? string.Empty)"
			type="@InputType"
			value="@ConfirmValue"
			id="@GetFullId("confirm-password")"
			class="form-control"
			disabled="@InputsDisabled"/>
		<label for="@GetFullId("confirm-password")">Confirm New Password</label>
	</div>

	<div class="form-check">
		<InputCheckbox
			@bind-Value="ShowAsPlainText"
			id="@GetFullId("show-passwords")"
			class="form-check-input"
			disabled="@InputsDisabled"/>
		<label class="form-check-label" for="@GetFullId("show-passwords")">Show passwords</label>
	</div>

	<ValidationMessage For="ValueExpression" id="@GetFullId("password-validation-message")"/>
	<ValidationMessage For="() => ConfirmValue" id="@GetFullId("confirm-password-validation-message")"/>
</div>

@code {
	[Parameter] public string IdBase { get; set; } = new IdGenerator().GetNextId();

	[Parameter] public string Class { get; set; } = "d-flex flex-column gap-2";

	[Parameter] public bool InputsDisabled { get; set; }

	[Compare("Value", ErrorMessage = "Passwords do not match.")]
	public string? ConfirmValue { get; set; }

	public bool ShowAsPlainText { get; set; }

	private string InputType => ShowAsPlainText ? "text" : "password";

	private FieldIdentifier _confirmValueIdentifier;

	public PasswordInput() {
		_confirmValueIdentifier = FieldIdentifier.Create(() => ConfirmValue);
	}

	private string GetFullId(string id) {
		return $"{IdBase}-{id}";
	}

	private void SetCurrentValue(string? value) {
		CurrentValue = string.IsNullOrEmpty(value) ? null : value;
		EditContext.NotifyFieldChanged(FieldIdentifier);
		EditContext.NotifyFieldChanged(_confirmValueIdentifier);
	}

	private void SetConfirmValue(string? value) {
		ConfirmValue = string.IsNullOrEmpty(value) ? null : value;
		EditContext.NotifyFieldChanged(_confirmValueIdentifier);
	}

	private bool AddConfirmValueToEditContext() {
		Type type = typeof(EditContext);
		if (type.GetMethod("GetOrAddFieldState", BindingFlags.Instance | BindingFlags.NonPublic) is { } method)
			return method.Invoke(EditContext, new object[] { _confirmValueIdentifier }) is not null;
		return false;
	}

	protected override void OnInitialized() {
		AddConfirmValueToEditContext();
		EditContext.OnValidationRequested += (_, _) => EditContext.NotifyFieldChanged(_confirmValueIdentifier);
	}

	protected override bool TryParseValueFromString(string? value, out string result, [NotNullWhen(false)] out string? validationErrorMessage) {
		result = value!;

		if (EditContext.GetValidationMessages(FieldIdentifier).FirstOrDefault() is { } message) {
			validationErrorMessage = message;
			return false;
		}

		if (Value is { Length: > 0 } && ConfirmValue is { Length: > 0 } && !Value.Equals(ConfirmValue)) {
			validationErrorMessage = "Passwords do not match.";
			return false;
		}

		validationErrorMessage = null;
		return true;
	}

}
