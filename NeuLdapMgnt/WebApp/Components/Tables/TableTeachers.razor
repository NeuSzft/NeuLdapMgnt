@inherits LayoutComponentBase
@implements IDisposable

<ConfirmDialog @ref="_dialog"/>

<Modal @ref="_modalEdit" title="Edit selected teachers" ModalType="ModalType.Warning" IsScrollable="true" OnHidden="ToggleEditMode">
	<BodyTemplate>
		<div class="fw-bold mb-2">After saving this action cannot be reverted!</div>
		<Switch @ref="_switchEditIsInactive" @bind-Value="_editIsInactive" Label="Set status to [Inactive]?"/>
		<Switch @ref="_switchEditIsAdmin" @bind-Value="_editIsAdmin" Label="Set status to [Administrator]?"/>
	</BodyTemplate>
	<FooterTemplate>
		<ButtonCancel Text="Cancel" OnClick="HideModalEdit"/>
		<ButtonSave Text="Save" OnClick="UpdateSelected"/>
	</FooterTemplate>
</Modal>

<div class="d-flex justify-content-between align-items-center g-2 mb-3">
	<div class="d-flex flex-grow-1 flex-md-grow-0">
		<SearchBar Label="ID, Name, Class" OnSearchQueryChanged="UpdateSearchQuery"/>
	</div>
	<div class="ms-2">
		@if (_isEditing)
		{
			<ButtonLoading ButtonColor="ButtonColor.Warning" SpinnerColor="SpinnerColor.Warning"/>
		}
		else
		{
			<ButtonEdit OnClick="ShowModalEdit" IsDisabled="IsTeacherSelected" Text="Edit selected"/>
		}
	</div>
</div>

<div class="table-teachers table-responsive rounded px-1 border flex-fill">
	<table class="table table-striped table-borderless align-middle">
		<thead class="sticky-top">
		<tr>
			<th class="user-select-none text-wrap col-1" role="button" @onclick="SelectAllTeachers">
				@if (!AreFilteredTeachersSelected())
				{
					<span>Select all</span>
				}
				else
				{
					<span>Deselect</span>
				}
			</th>
			<th class="user-select-none" role="button" @onclick="@(() => SortTable("ID"))">
				ID
				@if (_sortBy == "ID")
				{
					<i class="bi @GetSortIcon(_isAscending)"></i>
				}
				else
				{
					<i class="bi bi-chevron-expand"></i>
				}
			</th>
			<th class="user-select-none" role="button" @onclick="@(() => SortTable("Name"))">
				Name
				@if (_sortBy == "Name")
				{
					<i class="bi @GetSortIcon(_isAscending)"></i>
				}
				else
				{
					<i class="bi bi-chevron-expand"></i>
				}
			</th>

			<th class="user-select-none" role="button" @onclick="@(() => SortTable("Class"))">
				Class
				@if (_sortBy == "Class")
				{
					<i class="bi @GetSortIcon(_isAscending)"></i>
				}
				else
				{
					<i class="bi bi-chevron-expand"></i>
				}
			</th>
			<th class="user-select-none">Admin?</th>
			<th class="user-select-none text-end">Inspect</th>
		</tr>
		</thead>
		<tbody>
		@foreach (var teacher in _filteredTeachers)
		{
			<tr>
				<td class="rounded-start">
					<input class="form-check-input"
					       type="checkbox"
					       checked="@_selectedTeachers.Contains(teacher)"
					       @onchange="() => SelectTeacher(teacher)"/>
				</td>
				<td>@teacher.Id</td>
				<td>@teacher.FullName</td>
				<td>@teacher.Class</td>
				<td>
					<input class="form-check-input"
					       type="checkbox"
					       checked="@teacher.IsAdmin"
					       disabled/>
				</td>
				<td class="text-end rounded-end">
					<ButtonInspect Id="@teacher.Id"/>
				</td>
			</tr>
		}
		</tbody>
	</table>
</div>


@code {
	[Parameter] public List<Teacher> Teachers { get; set; } = new();

	[Parameter] public EventCallback<(List<Teacher>, bool, bool)> OnTeachersUpdate { get; set; }

	private Timer?        _searchDelayTimer;
	private List<Teacher> _filteredTeachers = new();
	private List<Teacher> _selectedTeachers = new();

	private ConfirmDialog _dialog    = default!;
	private Modal         _modalEdit = default!;

	private string? _searchQuery = string.Empty;
	private string  _sortBy      = string.Empty;
	private bool    _isAscending = false;

	private bool   _editIsAdmin          = false;
	private Switch _switchEditIsAdmin    = default!;
	private bool   _editIsInactive       = false;
	private Switch _switchEditIsInactive = default!;

	private bool _isEditing = false;
	private bool IsTeacherSelected => !_selectedTeachers.Any();

	protected override void OnInitialized()
	{
		_filteredTeachers = Teachers.ToList();
		_searchDelayTimer = new Timer(Callback, null, Timeout.Infinite, Timeout.Infinite);
	}

	private async Task UpdateSelected()
	{
		if (!_editIsInactive && !_editIsAdmin)
		{
			ToastService.Notify(ToastMessages.Light("Set status to continue."));
			return;
		}

		var parameters = new Dictionary<string, object>();
		parameters.Add("List", _selectedTeachers.Select(x => $"[{x.Class}] {x.FullName}").ToList());

		string confirmTitle = "Set status to";
		if (_editIsInactive)
		{
			confirmTitle += " [Inactive]";
		}

		if (_editIsAdmin)
		{
			confirmTitle += " [Administrator]";
		}

		var confirmation = await _dialog.ShowAsync<CustomList>(
			title: confirmTitle,
			parameters: parameters,
			confirmDialogOptions: DialogOptions.Confirm()
		);

		if (!confirmation) return;

		if (OnTeachersUpdate.HasDelegate)
		{
			await OnTeachersUpdate.InvokeAsync((_selectedTeachers, _editIsAdmin, _editIsInactive));
			await HideModalEdit();
		}
	}

	private void SelectTeacher(Teacher teacher)
	{
		if (_selectedTeachers.Contains(teacher))
		{
			_selectedTeachers.Remove(teacher);
		}
		else
		{
			_selectedTeachers.Add(teacher);
		}
	}

	private void SelectAllTeachers()
	{
		if (AreFilteredTeachersSelected())
		{
			_selectedTeachers.Clear();
		}
		else
		{
			_selectedTeachers = _filteredTeachers.ToList();
		}
	}

	private void GetFilteredTeachers()
	{
		if (string.IsNullOrWhiteSpace(_searchQuery))
		{
			_filteredTeachers = Teachers.ToList();
		}
		else
		{
			_filteredTeachers = Teachers
			                    .Where(x => x.Id.ToString().Contains(_searchQuery, StringComparison.OrdinalIgnoreCase)
			                                || x.FullName.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase)
			                                || x.Class.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase))
			                    .ToList();
		}

		_selectedTeachers.Clear();
	}

	private void Callback(object? state)
	{
		InvokeAsync(() =>
		{
			GetFilteredTeachers();
			StateHasChanged();
		});
	}

	private void UpdateSearchQuery(string query)
	{
		_searchQuery = query;
		_searchDelayTimer?.Change(400, Timeout.Infinite);
	}

	private bool AreFilteredTeachersSelected()
	{
		return _selectedTeachers.Count > 0;
	}

	private void SortTable(string propertyName)
	{
		if (_sortBy == propertyName)
		{
			_isAscending = !_isAscending;
		}
		else
		{
			_sortBy = propertyName;
			_isAscending = true;
		}

		_filteredTeachers = propertyName switch
		{
			"ID" => _isAscending
				? _filteredTeachers.OrderBy(x => x.Id).ToList()
				: _filteredTeachers.OrderByDescending(x => x.Id).ToList(),
			"Name" => _isAscending
				? _filteredTeachers.OrderBy(x => Utils.GetClassOrderValue(x.Class)).ToList()
				: _filteredTeachers.OrderByDescending(x => Utils.GetClassOrderValue(x.Class)).ToList(),
			"Class" => _isAscending
				? _filteredTeachers.OrderBy(x => x.Username).ToList()
				: _filteredTeachers.OrderByDescending(x => x.Username).ToList(),
			_ => _filteredTeachers
		};
	}

	private string GetSortIcon(bool asc) => asc ? "bi-sort-up" : "bi-sort-down";

	private void ShowTeacher(string id) => NavManager.NavigateTo($"/teachers/{id}");

	private void InspectTeacher(Teacher teacher) => ShowTeacher(teacher.Id.ToString());

	private void ToggleEditMode() => _isEditing = !_isEditing;

	private async Task ShowModalEdit()
	{
		await _modalEdit.ShowAsync();
		ToggleEditMode();
	}

	private async Task HideModalEdit()
	{
		_editIsAdmin = false;
		_editIsInactive = false;
		await _modalEdit.HideAsync();
	}

	public void Dispose() => _searchDelayTimer?.Dispose();
}
