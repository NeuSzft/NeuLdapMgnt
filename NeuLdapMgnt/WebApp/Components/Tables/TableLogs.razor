@inherits LayoutComponentBase

<div class="d-flex justify-content-between align-items-center g-2 my-2">
	<DateInput TValue="DateTime" @bind-Value="@_from" Placeholder="from"/>
	<DateInput TValue="DateTime" @bind-Value="@_to" Placeholder="to"/>
</div>

<table class="table table-striped table-hover rounded-3">
	<thead>
	<tr>
		<th class="user-select-none">ID</th>
		<th class="user-select-none">Timestamp</th>
		<th class="user-select-none">Log Level</th>
		<th class="user-select-none">Username</th>
		<th class="user-select-none">Full Name</th>
		<th class="user-select-none">Host</th>
		<th class="user-select-none">Method</th>
		<th class="user-select-none">Request Path</th>
		<th class="user-select-none">Response Code</th>
	</tr>
	</thead>
	<tbody>
	@foreach (var entry in _entries) {
		<tr>
			<td>@entry.Id</td>
			<td>@entry.Time</td>
			<td>@entry.LogLevel</td>
			<td>@entry.Username</td>
			<td>@entry.FullName</td>
			<td>@entry.Host</td>
			<td>@entry.Method</td>
			<td>@entry.RequestPath</td>
			<td>@entry.StatusCode</td>
		</tr>
	}
	</tbody>
</table>

@code {

	DateTime              _from    = DateTime.Now.AddHours(-12);
	DateTime              _to      = DateTime.Now;
	IEnumerable<LogEntry> _entries = Array.Empty<LogEntry>();

	private async Task Fetch() {
		long from = new DateTimeOffset(_from).ToUniversalTime().ToUnixTimeSeconds();
		long to   = new DateTimeOffset(_to).ToUniversalTime().ToUnixTimeSeconds();

		var result = await ApiRequests.SendRequestAsync<LogEntry>(
			HttpMethod.Get,
			$"/api/logs?from={from}&to={to}"
		);

		if (result.IsSuccess())
			_entries = result.Values;
		else
			ToastService.Notify(ToastMessages.Error(result.GetError()));
	}

	protected override async Task OnInitializedAsync() {
		await Fetch();
		await base.OnInitializedAsync();
	}

}
