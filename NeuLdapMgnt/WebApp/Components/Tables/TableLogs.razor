@inherits LayoutComponentBase

<div class="w-100">
	<fieldset class="form-group">
		<div class="row mb-1">
			<div class="col-12 col-lg-1">
				<legend class="col-form-label mb-1">Between</legend>
			</div>
			<div class="col-12 col-lg-6 mb-1">
				<DateInput TValue="DateOnly" @bind-Value="@_fromDate"/>
			</div>
			<div class="col-12 col-lg-5 mb-1">
				<TimeInput TValue="TimeOnly" @bind-Value="@_fromTime"/>
			</div>
		</div>
	</fieldset>

	<fieldset class="form-group">
		<div class="row mb-1">
			<div class="col-12 col-lg-1">
				<legend class="col-form-label mb-1">And</legend>
			</div>
			<div class="col-12 col-lg-6 mb-1">
				<DateInput TValue="DateOnly" @bind-Value="@_toDate"/>
			</div>
			<div class="col-12 col-lg-5 mb-1">
				<TimeInput TValue="TimeOnly" @bind-Value="@_toTime"/>
			</div>
		</div>
	</fieldset>

	<div class="d-flex flex-row flex-wrap justify-content-between my-4">
		<ButtonRefresh OnClick="@Fetch" Text="Fetch Logs"/>
		<div class="align-self-center text-end">
			<a href="/api/docs" target="_blank">View API endpoint docs</a>
		</div>
	</div>
</div>

<div class="overflow-auto">
	<table class="table table-striped table-hover rounded-3">
		<thead class="align-middle">
		<tr>
			<th class="user-select-none">ID</th>
			<th class="user-select-none">Timestamp</th>
			<th class="user-select-none">Log Level</th>
			<th class="user-select-none">Username</th>
			<th class="user-select-none">Full Name</th>
			<th class="user-select-none">Host</th>
			<th class="user-select-none">Method</th>
			<th class="user-select-none">Request Path</th>
			<th class="user-select-none">Response Code</th>
		</tr>
		</thead>
		<tbody class="align-middle">
		@foreach (var entry in _entries) {
			<tr>
				<td>@entry.Id</td>
				<td>@entry.Time</td>
				<td>@entry.LogLevel</td>
				<td>@entry.Username</td>
				<td>@entry.FullName</td>
				<td>@entry.Host</td>
				<td>@entry.Method</td>
				<td>@entry.RequestPath</td>
				<td>@entry.StatusCode</td>
			</tr>
		}
		</tbody>
	</table>
</div>

@code {
	DateOnly _fromDate = DateOnly.FromDateTime(DateTime.Now.AddHours(-12));
	TimeOnly _fromTime = TimeOnly.FromDateTime(DateTime.Now.AddHours(-12));
	DateOnly _toDate   = DateOnly.FromDateTime(DateTime.Now);
	TimeOnly _toTime   = TimeOnly.FromDateTime(DateTime.Now);

	IEnumerable<LogEntry> _entries = Array.Empty<LogEntry>();

	private async Task Fetch() {
		long from = new DateTimeOffset(_fromDate.ToDateTime(_fromTime, DateTimeKind.Local)).ToUniversalTime().ToUnixTimeSeconds();
		long to   = new DateTimeOffset(_toDate.ToDateTime(_toTime, DateTimeKind.Local)).ToUniversalTime().ToUnixTimeSeconds();

		var result = await ApiRequests.SendRequestAsync<LogEntry>(
			HttpMethod.Get,
			$"/api/logs?from={from}&to={to}"
		);

		if (result.IsSuccess())
			_entries = result.Values;
		else
			ToastService.Notify(ToastMessages.Error(result.GetError()));
	}

	protected override async Task OnInitializedAsync() {
		await Fetch();
		await base.OnInitializedAsync();
	}

}
