@inherits LayoutComponentBase
@implements IDisposable

<ConfirmDialog @ref="_dialog"/>

<Modal @ref="_modalEdit" title="Edit selected students" ModalType="ModalType.Warning" IsScrollable="true" OnHidden="ToggleEditMode">
	<BodyTemplate>
		<div class="fw-bold mb-2">After saving this action cannot be reverted!</div>
		<div class="mb-2">
			<Switch @ref="_switchEditIsActive" Value="_editIsInactive" ValueExpression="() => _editIsInactive" ValueChanged="ToogleInactiveSwitch" Label="Set status to [Inactive]?"/>
		</div>
		<div class="form-floating">
			<InputSelect class="form-select rounded" id="class-select" @bind-Value="_editedClass" disabled="@_editIsInactive">
				<option value="@string.Empty" disabled>Select class</option>
				@foreach (var cls in LocalDbService.Classes)
				{
					<option value="@cls">@cls</option>
				}
			</InputSelect>
			<label for="class-select">New Class</label>
		</div>
	</BodyTemplate>
	<FooterTemplate>
		<ButtonCancel Text="Cancel" OnClick="HideModalEdit"/>
		<ButtonSave Text="Save" OnClick="UpdateSelected"/>
	</FooterTemplate>
</Modal>

<div class="d-flex justify-content-between align-items-center g-2 mb-3">
	<div class="d-flex flex-grow-1 flex-md-grow-0">
		<SearchBar Label="ID, Name, Class" OnSearchQueryChanged="UpdateSearchQuery"/>
	</div>
	<div class="ms-2">
		@if (_isEditing)
		{
			<ButtonLoading ButtonColor="ButtonColor.Warning" SpinnerColor="SpinnerColor.Warning"/>
		}
		else
		{
			<ButtonEdit OnClick="ShowModalEdit" IsDisabled="IsStudentSelected" Text="Edit selected"/>
		}
	</div>
</div>

<div class="table-students table-responsive rounded px-1 border flex-fill">
	<table class="table table-striped table-borderless align-middle">
		<thead class="sticky-top">
		<tr class="rounded">
			<th class="user-select-none text-wrap col-1" role="button" @onclick="SelectAllStudents">
				@if (!AreFilteredStudentsSelected())
				{
					<span>Select all</span>
				}
				else
				{
					<span>Deselect</span>
				}
			</th>
			<th class="user-select-none" role="button" @onclick="@(() => SortTable("Id"))">
				ID
				@if (_sortBy == "Id")
				{
					<i class="bi @GetSortIcon(_isAscending)"></i>
				}
				else
				{
					<i class="bi bi-chevron-expand"></i>
				}
			</th>
			<th class="user-select-none" role="button" @onclick="@(() => SortTable("Name"))">
				Name
				@if (_sortBy == "Name")
				{
					<i class="bi @GetSortIcon(_isAscending)"></i>
				}
				else
				{
					<i class="bi bi-chevron-expand"></i>
				}
			</th>
			@if (NavManager.Uri.Contains("/db/classes/"))
			{
				<th class="user-select-none">Status</th>
			}
			else
			{
				<th class="user-select-none" role="button" @onclick="@(() => SortTable("Class"))">
					Class
					@if (_sortBy == "Class")
					{
						<i class="bi @GetSortIcon(_isAscending)"></i>
					}
					else
					{
						<i class="bi bi-chevron-expand"></i>
					}
				</th>
			}
			<th class="user-select-none text-end">Inspect</th>
		</tr>
		</thead>
		<tbody>
		@foreach (var student in _filteredStudents)
		{
			<tr>
				<td class="rounded-start">
					<input class="form-check-input"
					       type="checkbox"
					       checked="@_selectedStudents.Contains(student)"
					       @onchange="() => SelectStudent(student)"/>
				</td>
				<td>@student.Id</td>
				<td>@student.FullName</td>
				@if (NavManager.Uri.Contains("/db/classes/"))
				{
					<td>
						@if (student.IsInactive)
						{
							<BadgeInactive/>
						}
						else
						{
							<BadgeActive/>
						}
					</td>
				}
				else
				{
					<td>
						<BadgeClass Class="@student.Class"/>
					</td>
				}
				<td class="text-end rounded-end">
					<ButtonInspect Id="@student.Id.ToString()"/>
				</td>
			</tr>
		}
		</tbody>
	</table>
</div>


@code {
	[Parameter] public List<Student> Students { get; set; } = new();

	[Parameter] public EventCallback<(List<Student>, string?, bool)> OnStudentsUpdate { get; set; }

	private Timer?        _searchDelayTimer;
	private List<Student> _filteredStudents = new();
	private List<Student> _selectedStudents = new();
	private ConfirmDialog _dialog           = default!;
	private Modal         _modalEdit        = default!;
	private Modal         _modalErrors      = default!;

	private string? _searchQuery = string.Empty;
	private string  _sortBy      = "Id";

	private bool _isAscending = true;
	private bool _isEditing   = false;

	private string _editedClass        = string.Empty;
	private bool   _editIsInactive     = false;
	private Switch _switchEditIsActive = default!;

	private bool IsStudentSelected => !_selectedStudents.Any();

	protected override void OnInitialized()
	{
		_filteredStudents = Students.ToList();
		_searchDelayTimer = new Timer(Callback, null, Timeout.Infinite, Timeout.Infinite);
	}

	private void ToogleInactiveSwitch()
	{
		_editIsInactive = !_editIsInactive;
		if (_editIsInactive)
		{
			_editedClass = string.Empty;
		}
	}

	private async Task UpdateSelected()
	{
		if (!_editIsInactive && string.IsNullOrEmpty(_editedClass))
		{
			ToastService.Notify(ToastMessages.Light("Select a new class or set status to continue."));
			return;
		}

		var parameters = new Dictionary<string, object>();
		parameters.Add("List", _selectedStudents.Select(x => $"[{x.Class}] {x.FullName}").ToList());

		var confirmation = await _dialog.ShowAsync<CustomList>(
			title: _editIsInactive ? "Set status to [Inactive]?" : $"Set class to [{_editedClass}]?",
			parameters: parameters,
			confirmDialogOptions: DialogOptions.Confirm());

		if (!confirmation) return;

		if (OnStudentsUpdate.HasDelegate)
		{
			await OnStudentsUpdate.InvokeAsync((_selectedStudents, _editedClass, _editIsInactive));
			await HideModalEdit();
		}
	}

	private void SelectStudent(Student student)
	{
		if (_selectedStudents.Contains(student))
		{
			_selectedStudents.Remove(student);
		}
		else
		{
			_selectedStudents.Add(student);
		}
	}

	private void SelectAllStudents()
	{
		if (AreFilteredStudentsSelected())
		{
			_selectedStudents.Clear();
		}
		else
		{
			_selectedStudents = _filteredStudents.ToList();
		}
	}

	private void GetFilteredStudents()
	{
		if (string.IsNullOrWhiteSpace(_searchQuery))
		{
			_filteredStudents = Students.ToList();
		}
		else
		{
			_filteredStudents = Students
			                    .Where(x => x.Id.ToString().Contains(_searchQuery, StringComparison.OrdinalIgnoreCase)
			                                || x.FullName.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase)
			                                || x.Class.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase))
			                    .ToList();
		}

		_selectedStudents.Clear();
	}

	private void Callback(object? state)
	{
		InvokeAsync(() =>
		{
			GetFilteredStudents();
			StateHasChanged();
		});
	}

	private void UpdateSearchQuery(string query)
	{
		_searchQuery = query;
		_searchDelayTimer?.Change(400, Timeout.Infinite);
	}

	private bool AreFilteredStudentsSelected() => _selectedStudents.Count > 0;

	private void ShowStudent(string id) => NavManager.NavigateTo($"/students/{id}");

	private void InspectStudent(Student student) => ShowStudent(student.Id.ToString());

	private string GetSortIcon(bool asc) => asc ? "bi-sort-up" : "bi-sort-down";

	private void SortTable(string propertyName)
	{
		if (_sortBy == propertyName)
		{
			_isAscending = !_isAscending;
		}
		else
		{
			_sortBy = propertyName;
			_isAscending = true;
		}

		_filteredStudents = propertyName switch
		{
			"Id" => _isAscending
				? _filteredStudents.OrderBy(x => x.Id).ToList()
				: _filteredStudents.OrderByDescending(x => x.Id).ToList(),
			"Name" => _isAscending
				? _filteredStudents.OrderBy(x => x.FullName).ToList()
				: _filteredStudents.OrderByDescending(x => x.FullName).ToList(),
			"Class" => _isAscending
				? _filteredStudents.OrderBy(x => Utils.GetClassOrderValue(x.Class)).ToList()
				: _filteredStudents.OrderByDescending(x => Utils.GetClassOrderValue(x.Class)).ToList(),
			_ => _filteredStudents
		};

		StateHasChanged();
	}

	private async Task ShowModalEdit()
	{
		await _modalEdit.ShowAsync();
		ToggleEditMode();
	}

	private async Task HideModalEdit() => await _modalEdit.HideAsync();

	private async Task ShowModalErrorList() => await _modalErrors.ShowAsync();

	private async Task HideModalErrorList()
	{
		await _modalErrors.HideAsync();
		await _modalEdit.HideAsync();
	}

	private void ToggleEditMode() => _isEditing = !_isEditing;

	public void Dispose() => _searchDelayTimer?.Dispose();
}
