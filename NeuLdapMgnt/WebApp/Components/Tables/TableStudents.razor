@inherits LayoutComponentBase
@implements IDisposable

<ConfirmDialog @ref="dialog" />

<Modal @ref="modalEdit" title="Edit selected students" ModalType="ModalType.Warning" IsScrollable="true" OnHidden="ToggleEditMode">
	<BodyTemplate>
		<div class="fw-bold mb-2">After saving this action cannot be reverted!</div>
		<div class="mb-2">
			<Switch @ref="switchEditIsActive" Value="editIsInactive" ValueExpression="() => editIsInactive" ValueChanged="ToogleInactiveSwitch" Label="Set status to [Inactive]?" />
		</div>
		<div class="form-floating">
			<InputSelect class="form-select rounded" id="class-select" @bind-Value="editedClass" disabled="@editIsInactive">
				<option value="@string.Empty" disabled>Select class</option>
				@foreach (var cls in LocalDbService.Classes)
				{
					<option value="@cls">@cls</option>
				}
			</InputSelect>
			<label for="class-select">New Class</label>
		</div>
	</BodyTemplate>
	<FooterTemplate>
		<ButtonCancel Text="Cancel" OnClick="HideModalEdit" />
		<ButtonSave Text="Save" OnClick="UpdateSelected" />
	</FooterTemplate>
</Modal>

<div class="d-flex justify-content-between align-items-center g-2 mb-3">
	<div class="d-flex flex-grow-1 flex-md-grow-0">
		<SearchBar Label="OM, Name, Class" OnSearchQueryChanged="UpdateSearchQuery" />
	</div>
	<div class="ms-2">
		@if (isEditing)
		{
			<ButtonLoading ButtonColor="ButtonColor.Warning" SpinnerColor="SpinnerColor.Warning"/>
		}
		else
		{
			<ButtonEdit OnClick="ShowModalEdit" IsDisabled="isStudentSelected" Text="Edit selected" />
		}
	</div>
</div>

<div class="table-students table-responsive rounded px-1 border flex-fill">
	<table class="table table-striped table-borderless align-middle">
		<thead class="sticky-top">
			<tr class="rounded">
				<th class="user-select-none text-wrap col-1" role="button" @onclick="SelectAllStudents">
					@if (!AreFilteredStudentsSelected())
					{
						<span>Select all</span>
					}
					else
					{
						<span>Deselect</span>
					}
				</th>
				<th class="user-select-none" role="button" @onclick="@(() => SortTable("Id"))">
					OM
					@if (sortBy == "Id")
					{
						<i class="bi @GetSortIcon(isAscending)"></i>
					}
					else
					{
						<i class="bi bi-chevron-expand"></i>
					}
				</th>
				<th class="user-select-none" role="button" @onclick="@(() => SortTable("Name"))">
					Name
					@if (sortBy == "Name")
					{
						<i class="bi @GetSortIcon(isAscending)"></i>
					}
					else
					{
						<i class="bi bi-chevron-expand"></i>
					}
				</th>
				<th class="user-select-none" role="button" @onclick="@(() => SortTable("Class"))">
					Class
					@if (sortBy == "Class")
					{
						<i class="bi @GetSortIcon(isAscending)"></i>
					}
					else
					{
						<i class="bi bi-chevron-expand"></i>
					}
				</th>
				<th class="user-select-none text-end">Inspect</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var student in filteredStudents)
			{
				<tr>
					<td class="rounded-start">
						<input class="form-check-input"
							   type="checkbox"
							   checked="@selectedStudents.Contains(student)"
							   @onchange="() => SelectStudent(student)" />
					</td>
					<td>@student.Id</td>
					<td>@student.FullName</td>
					<td>@student.Class</td>
					<td class="text-end rounded-end">
						<ButtonInspect Id="@student.Id.ToString()" />
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>



@code {
	[Parameter]
	public List<Student> Students { get; set; } = new();

	[Parameter]
	public EventCallback<(List<Student>, string?, bool)> OnStudentsUpdate { get; set; }

	private List<Student> filteredStudents = new();
	private List<Student> selectedStudents = new();
	private Timer? searchDelayTimer;

	private ConfirmDialog dialog = default!;
	private Modal modalEdit = default!;
	private Modal modalErrors = default!;

	private string? searchQuery = string.Empty;
	private string sortBy = "Id";

	private bool isAscending = true;
	private bool isEditing = false;
	private bool isStudentSelected => !selectedStudents.Any();

	private string editedClass = string.Empty;
	private bool editIsInactive = false;
	private Switch switchEditIsActive = default!;

	protected override void OnInitialized()
	{
		filteredStudents = Students.ToList();
		searchDelayTimer = new Timer(Callback, null, Timeout.Infinite, Timeout.Infinite);
	}

	private void ToogleInactiveSwitch()
	{
		editIsInactive = !editIsInactive;
		if (editIsInactive)
		{
			editedClass = string.Empty;
		}
	}

	private async Task UpdateSelected()
	{
		if (!editIsInactive && string.IsNullOrEmpty(editedClass))
		{
			ToastService.Notify(ToastMessages.Light("Select a new class or set status to continue."));
			return;
		}

		var parameters = new Dictionary<string, object>();
		parameters.Add("List", selectedStudents.Select(x => $"[{x.Class}] {x.FullName}").ToList());

		var confirmation = await dialog.ShowAsync<CustomList>(
			title: editIsInactive ? "Set status to [Inactive]?" : $"Set class to [{editedClass}]?",
			parameters: parameters,
			confirmDialogOptions: DialogOptions.Confirm());

		if (!confirmation) return;

		if (OnStudentsUpdate.HasDelegate)
		{
			await OnStudentsUpdate.InvokeAsync((selectedStudents, editedClass, editIsInactive));
			await HideModalEdit();
		}
	}

	private void SelectStudent(Student student)
	{
		if (selectedStudents.Contains(student))
		{
			selectedStudents.Remove(student);
		}
		else
		{
			selectedStudents.Add(student);
		}
	}

	private void SelectAllStudents()
	{
		if (AreFilteredStudentsSelected())
		{
			selectedStudents.Clear();
		}
		else
		{
			selectedStudents = filteredStudents.ToList();
		}
	}

	private void GetFilteredStudents()
	{
		if (string.IsNullOrWhiteSpace(searchQuery))
		{
			filteredStudents = Students.ToList();
		}
		else
		{
			filteredStudents = Students
				.Where(x => x.Id.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
							|| x.FullName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
							|| x.Class.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}

		selectedStudents.Clear();
	}

	private void Callback(object? state)
	{
		InvokeAsync(() =>
		{
			GetFilteredStudents();
			StateHasChanged();
		});
	}

	private void UpdateSearchQuery(string query)
	{
		searchQuery = query;
		searchDelayTimer?.Change(400, Timeout.Infinite);
	}

	private bool AreFilteredStudentsSelected() => selectedStudents.Count > 0;

	private void ShowStudent(string id) => NavManager.NavigateTo($"/students/{id}");

	private void InspectStudent(Student student) => ShowStudent(student.Id.ToString());

	private string GetSortIcon(bool asc) => asc ? "bi-sort-up" : "bi-sort-down";

	private void SortTable(string propertyName)
	{
		if (sortBy == propertyName)
		{
			isAscending = !isAscending;
		}
		else
		{
			sortBy = propertyName;
			isAscending = true;
		}

		switch (propertyName)
		{
			case "Id":
				filteredStudents = isAscending
					? filteredStudents.OrderBy(x => x.Id).ToList()
					: filteredStudents.OrderByDescending(x => x.Id).ToList();
				break;

			case "Name":
				filteredStudents = isAscending
					? filteredStudents.OrderBy(x => x.FullName).ToList()
					: filteredStudents.OrderByDescending(x => x.FullName).ToList();
				break;

			case "Class":
				filteredStudents = isAscending
					? filteredStudents
							.OrderBy(x => Utils.GetClassOrderValue(x.Class))
							.ToList()
					: filteredStudents
							.OrderByDescending(x => Utils.GetClassOrderValue(x.Class))
							.ToList();
				break;

			default:
				break;
		}

		StateHasChanged();
	}

	private async Task ShowModalEdit()
	{
		if (modalEdit is null) return;
		await modalEdit.ShowAsync();
		ToggleEditMode();
	}

	private async Task HideModalEdit()
	{
		if (modalEdit is null) return;
		await modalEdit.HideAsync();
	}

	private async Task ShowModalErrorList()
	{
		if (modalErrors is null) return;
		await modalErrors.ShowAsync();
	}

	private async Task HideModalErrorList()
	{
		if (modalErrors is null) return;
		await modalErrors.HideAsync();

		if (modalEdit is null) return;
		await modalEdit.HideAsync();
	}

	private void ToggleEditMode() => isEditing = !isEditing;

	public void Dispose() => searchDelayTimer?.Dispose();
}

