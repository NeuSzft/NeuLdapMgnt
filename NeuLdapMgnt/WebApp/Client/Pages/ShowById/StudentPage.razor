@page "/students/{id}"

<PageTitle>@student.FullName</PageTitle>

@if (student is null)
{
	<Loading />
}
else
{
	<h3>[@student.Class] @student.FullName</h3>
	<BaseEditFormStudent TheStudent="student" OnSubmit="HandleEditedStudent" IsReadonly="true" CanDelete="true" />
}

@code {
	[Parameter]
	public string Id { get; set; } = null!;

	private Student student = StudentFactory.CreateEmptyStudent().Build();

	protected override void OnInitialized()
	{
		ApiRequests.EnsureAuthentication(NavManager);

		long.TryParse(Id, out long id);
		var searchedStudent = Lists.GetStudents().FirstOrDefault(x => x.Id.Equals(id));

		if (searchedStudent is null) return;
		student = searchedStudent;
	}

	private async Task HandleEditedStudent(Student editedStudent)
	{
		if (student.Equals(editedStudent)) return;

		try
		{
			//await ApiRequests.UpdateStudentAsync(editedStudent);
			int studentIndex = Lists.Students.IndexOf(student);
			Lists.Students[studentIndex] = editedStudent;
			NavManager.NavigateTo("students");
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}
}
