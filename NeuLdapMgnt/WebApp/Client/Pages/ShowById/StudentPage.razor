@page "/students/{id}"

<PageTitle>@student.FullName</PageTitle>

@if (student is null)
{
	<Loading />
}
else
{
	<h3>[@student.Class] @student.FullName</h3>
	<BaseEditFormStudent TheStudent="student" OnSubmit="HandleEditedStudent" IsReadonly="true" CanDelete="true" />
}

@code {
	[Parameter]
	public string Id { get; set; } = null!;

	private Student student = StudentFactory.CreateEmptyStudent().Build();

	protected override void OnInitialized()
	{
		ApiRequests.EnsureAuthentication(NavManager);

		long.TryParse(Id, out long id);
		var searchedStudent = Lists.GetStudents().FirstOrDefault(x => x.Id.Equals(id));

		if (searchedStudent is null) return;
		student = searchedStudent;
	}

	private async Task HandleEditedStudent(Student editedStudent)
	{
		if (student.Equals(editedStudent)) return;

		try
		{
			var response = await ApiRequests.UpdateStudentAsync(student.Id, editedStudent);
			if (response is null)
			{
				// Add a modal to display no response error.
				Console.WriteLine("No response from the api.");
				return;
			}

			if (response.IsSuccess())
			{
				// Add a modal to display successful edit.
				Console.WriteLine($"Successfully edited: {student.Id}");
				NavManager.NavigateTo("/students");
			}

			if (response.Errors.Any())
			{
				// Add a modal to display all errors.
				Console.WriteLine("Errors:\n" + string.Join('\n', response.Errors));
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}
}
