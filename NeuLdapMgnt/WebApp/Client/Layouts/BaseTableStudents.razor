@inherits LayoutComponentBase

<div class="row justify-content-between g-2 my-2">
	<div class="input-group col">
		<label class="input-group-text" for="searchbar"><i class="bi bi-funnel"></i></label>
		<div class="form-floating">
			<input type="search"
				   class="form-control rounded-0 rounded-end"
				   id="searchbar"
				   @oninput="UpdateSearchQuery"
				   @bind-value="searchQuery" />
			<label for="searchbar">OM, Name, Class</label>
		</div>
		<div class="col text-end">
			<ButtonEdit OnClick="EditSelected" IsDisabled="isStudentSelected" Text="Edit selected" />
		</div>
	</div>
</div>

<table class="table table-striped">
	<thead>
		<tr>
			<th class="user-select-none text-wrap col-1" role="button" @onclick="SelectAllStudents">
				@if (!AreAllFilteredStudentsSelected())
				{
					<span>Select all (@selectedStudents.Count/@filteredStudents.Count)</span>
				}
				else
				{
					<span>Deselect all (@selectedStudents.Count/@filteredStudents.Count)</span>
				}
			</th>
			<th class="user-select-none" role="button" @onclick="@(() => SortTable("Id"))">
				OM
				@if (sortBy == "Id")
				{
					<i class="bi @GetSortIcon(isAscending)"></i>
				}
			</th>
			<th class="user-select-none" role="button" @onclick="@(() => SortTable("Name"))">
				Name
				@if (sortBy == "Name")
				{
					<i class="bi @GetSortIcon(isAscending)"></i>
				}
			</th>
			<th class="user-select-none" role="button" @onclick="@(() => SortTable("Class"))">
				Class
				@if (sortBy == "Class")
				{
					<i class="bi @GetSortIcon(isAscending)"></i>
				}
			</th>
			<th class="user-select-none text-end">Inspect |  Edit</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var student in filteredStudents)
		{
			<tr>
				<td>
					<input class="form-check-input m-auto"
						   type="checkbox"
						   checked="@selectedStudents.Contains(student)"
						   @onchange="() => SelectStudent(student)" />
				</td>
				<td>@student.Id</td>
				<td>@student.GetFullName()</td>
				<td>@student.Class</td>
				<td class="text-end">
					<button class="btn btn-primary" @onclick="() => ShowStudent(student.Id.ToString())">
						<i class="bi bi-eye"></i>
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>

@code {
	[Parameter]
	public List<Student> Students { get; set; } = new();

	private List<Student> filteredStudents = new();
	private List<Student> selectedStudents = new();

	private bool isStudentSelected => !selectedStudents.Any();
	private bool isAscending = true;

	private string sortBy = "";
	private string? searchQuery = string.Empty;

	private Timer? searchDelayTimer;

	protected override void OnInitialized()
	{
		filteredStudents = Students.ToList();
		searchDelayTimer = new Timer(Callback, null, Timeout.Infinite, Timeout.Infinite);
	}

	private void SelectStudent(Student student)
	{
		if (selectedStudents.Contains(student))
		{
			selectedStudents.Remove(student);
		}
		else
		{
			selectedStudents.Add(student);
		}
	}

	private void SelectAllStudents()
	{
		if (AreAllFilteredStudentsSelected())
		{
			selectedStudents.Clear();
		}
		else
		{
			selectedStudents = filteredStudents.ToList();
		}

		StateHasChanged();
	}

	private void EditSelected()
	{
		selectedStudents.ForEach(x => Console.WriteLine(x.Id));
	}

	private void GetFilteredStudents()
	{
		if (string.IsNullOrWhiteSpace(searchQuery))
		{
			filteredStudents = Students.ToList();
		}
		else
		{
			filteredStudents = Students
				.Where(x => x.Id.ToString().StartsWith(searchQuery, StringComparison.OrdinalIgnoreCase)
							|| x.GetFullName().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
							|| x.Class.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}

		selectedStudents.Clear();
	}

	private void Callback(object? state)
	{
		InvokeAsync(() =>
		{
			GetFilteredStudents();
			StateHasChanged();
		});
	}

	private void UpdateSearchQuery(ChangeEventArgs e)
	{
		searchQuery = e.Value?.ToString();
		searchDelayTimer?.Change(400, Timeout.Infinite);
	}

	private bool AreAllFilteredStudentsSelected()
	{
		return selectedStudents.Count > 0
			&& selectedStudents.Count.Equals(filteredStudents.Count);
	}

	private void ShowStudent(string id) => NavManager.NavigateTo($"/students/{id}");

	private string GetSortIcon(bool asc) => asc ? "bi-sort-up" : "bi-sort-down";

	private void SortTable(string propertyName)
	{
		if (sortBy == propertyName)
		{
			isAscending = !isAscending;
		}
		else
		{
			sortBy = propertyName;
			isAscending = true;
		}

		switch (propertyName)
		{
			case "Id":
				filteredStudents = isAscending
					? filteredStudents.OrderBy(x => x.Id).ToList()
					: filteredStudents.OrderByDescending(x => x.Id).ToList();
				break;

			case "Name":
				filteredStudents = isAscending
					? filteredStudents.OrderBy(x => x.GetFullName()).ToList()
					: filteredStudents.OrderByDescending(x => x.GetFullName()).ToList();
				break;

			case "Class":
                filteredStudents = isAscending
                    ? filteredStudents
                      .OrderBy(x => x.ClassYearOrderValue())
                      .ThenBy(x => x.ClassGroup)
                      .ToList()
                    : filteredStudents
                      .OrderByDescending(x => x.ClassYearOrderValue())
                      .ThenByDescending(x => x.ClassGroup)
                      .ToList();
                break;

			default:
				break;
		}

		StateHasChanged();
	}

	public void Dispose() => searchDelayTimer?.Dispose();
}

